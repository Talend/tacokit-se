[
  {
    "request":{
      "headers":{
        "content-length":"0",
        "x-ms-version":"2018-11-09",
        "Accept":"application/json, */*",
        "Connection":"keep-alive",
        "Content-Type":"application/json; charset=utf-8"
      },
      "method":"GET",
      "uri":"https://undxgen2.dfs.core.windows.net/adls-gen2/myNewFolder/nostorelookup.java?timeout=60&sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2019-06-02T17:12:37Z&st=2019-04-02T09:12:37Z&spr=https&sig=sign-here"
    },
    "response":{
      "headers":{
        "x-ms-server-encrypted":"true",
        "x-ms-version":"2018-11-09",
        "Server":"Windows-Azure-HDFS/1.0 Microsoft-HTTPAPI/2.0",
        "ETag":"\"0x8D6A7A04EAAC592\"",
        "x-ms-properties":"",
        "Last-Modified":"Wed, 13 Mar 2019 10:40:27 GMT",
        "Content-Length":"102801",
        "x-ms-request-id":"3fdfe869-801f-0024-1029-16b975000000",
        "x-ms-resource-type":"file",
        "Content-Type":"application/octet-stream"
      },
      "payload":"package di_demos.copy_of_talendbugdemodb_0_1;\n\nimport routines.DataOperation;\nimport routines.TalendDataGenerator;\nimport routines.DataQuality;\nimport routines.Relational;\nimport routines.DataQualityDependencies;\nimport routines.Mathematical;\nimport routines.SQLike;\nimport routines.Numeric;\nimport routines.TalendStringUtil;\nimport routines.TalendString;\nimport routines.DQTechnical;\nimport routines.StringHandling;\nimport routines.MDM;\nimport routines.DataMasking;\nimport routines.TalendDate;\nimport routines.DqStringHandling;\nimport routines.system.*;\nimport routines.system.api.*;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.List;\nimport java.math.BigDecimal;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.Comparator;\n\n//the import part of tJava_1\n//import java.util.List;\n\n@SuppressWarnings(\"unused\")\n/**\n * Job: Copy_of_TalendBugDemoDB Purpose: <br>\n * Description:  <br>\n * @author user@talend.com\n * @version 7.2.1.20190306_2241-SNAPSHOT\n * @status \n */\npublic class Copy_of_TalendBugDemoDB implements TalendJob {\n    static {\n        System.setProperty(\"TalendJob.log\", \"Copy_of_TalendBugDemoDB.log\");\n    }\n    private static org.apache.log4j.Logger log = org.apache.log4j.Logger\n        .getLogger(Copy_of_TalendBugDemoDB.class);\n\n    protected static void logIgnoredError(String message, Throwable cause) {\n        log.error(message, cause);\n\n    }\n\n    public final Object obj = new Object();\n\n    // for transmiting parameters purpose\n    private Object valueObject = null;\n\n    public Object getValueObject() {\n        return this.valueObject;\n    }\n\n    public void setValueObject(Object valueObject) {\n        this.valueObject = valueObject;\n    }\n\n    private final static String defaultCharset = java.nio.charset.Charset\n        .defaultCharset().name();\n\n    private final static String utf8Charset = \"UTF-8\";\n\n    // contains type for every context property\n    public class PropertiesWithType extends java.util.Properties {\n        private static final long serialVersionUID = 1L;\n        private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();\n\n        public PropertiesWithType(java.util.Properties properties) {\n            super(properties);\n        }\n\n        public PropertiesWithType() {\n            super();\n        }\n\n        public void setContextType(String key, String type) {\n            propertyTypes.put(key, type);\n        }\n\n        public String getContextType(String key) {\n            return propertyTypes.get(key);\n        }\n    }\n\n    // create and load default properties\n    private java.util.Properties defaultProps = new java.util.Properties();\n\n    // create application properties with default\n    public class ContextProperties extends PropertiesWithType {\n\n        private static final long serialVersionUID = 1L;\n\n        public ContextProperties(java.util.Properties properties) {\n            super(properties);\n        }\n\n        public ContextProperties() {\n            super();\n        }\n\n        public void synchronizeContext() {\n\n        }\n\n    }\n\n    protected ContextProperties context = new ContextProperties(); // will be\n    // instanciated\n    // by MS.\n\n    public ContextProperties getContext() {\n        return this.context;\n    }\n\n    private final String jobVersion = \"0.1\";\n    private final String jobName = \"Copy_of_TalendBugDemoDB\";\n    private final String projectName = \"DI_DEMOS\";\n    public Integer errorCode = null;\n    private String currentComponent = \"\";\n\n    private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();\n    private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();\n\n    private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();\n    private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();\n    private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();\n    public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();\n\n    // OSGi DataSource\n    private final static String KEY_DB_DATASOURCES = \"KEY_DB_DATASOURCES\";\n\n    private final static String KEY_DB_DATASOURCES_RAW = \"KEY_DB_DATASOURCES_RAW\";\n\n    public void setDataSources(\n                               java.util.Map<String, javax.sql.DataSource> dataSources) {\n        java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();\n        for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources\n                 .entrySet()) {\n            talendDataSources.put(\n                                  dataSourceEntry.getKey(),\n                                  new routines.system.TalendDataSource(dataSourceEntry\n                                                                       .getValue()));\n        }\n        globalMap.put(KEY_DB_DATASOURCES, talendDataSources);\n        globalMap\n            .put(KEY_DB_DATASOURCES_RAW,\n                 new java.util.HashMap<String, javax.sql.DataSource>(\n                                                                     dataSources));\n    }\n\n    private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();\n    private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(\n                                                                               new java.io.BufferedOutputStream(baos));\n\n    public String getExceptionStackTrace() {\n        if (\"failure\".equals(this.getStatus())) {\n            errorMessagePS.flush();\n            return baos.toString();\n        }\n        return null;\n    }\n\n    private Exception exception;\n\n    public Exception getException() {\n        if (\"failure\".equals(this.getStatus())) {\n            return this.exception;\n        }\n        return null;\n    }\n\n    private class TalendException extends Exception {\n\n        private static final long serialVersionUID = 1L;\n\n        private java.util.Map<String, Object> globalMap = null;\n        private Exception e = null;\n        private String currentComponent = null;\n        private String virtualComponentName = null;\n\n        public void setVirtualComponentName(String virtualComponentName) {\n            this.virtualComponentName = virtualComponentName;\n        }\n\n        private TalendException(Exception e, String errorComponent,\n                                final java.util.Map<String, Object> globalMap) {\n            this.currentComponent = errorComponent;\n            this.globalMap = globalMap;\n            this.e = e;\n        }\n\n        public Exception getException() {\n            return this.e;\n        }\n\n        public String getCurrentComponent() {\n            return this.currentComponent;\n        }\n\n        public String getExceptionCauseMessage(Exception e) {\n            Throwable cause = e;\n            String message = null;\n            int i = 10;\n            while (null != cause && 0 < i--) {\n                message = cause.getMessage();\n                if (null == message) {\n                    cause = cause.getCause();\n                } else {\n                    break;\n                }\n            }\n            if (null == message) {\n                message = e.getClass().getName();\n            }\n            return message;\n        }\n\n        @Override\n        public void printStackTrace() {\n            if (!(e instanceof TalendException || e instanceof TDieException)) {\n                if (virtualComponentName != null\n                    && currentComponent.indexOf(virtualComponentName + \"_\") == 0) {\n                    globalMap.put(virtualComponentName + \"_ERROR_MESSAGE\",\n                                  getExceptionCauseMessage(e));\n                }\n                globalMap.put(currentComponent + \"_ERROR_MESSAGE\",\n                              getExceptionCauseMessage(e));\n                System.err.println(\"Exception in component \" + currentComponent\n                                   + \" (\" + jobName + \")\");\n            }\n            if (!(e instanceof TDieException)) {\n                if (e instanceof TalendException) {\n                    e.printStackTrace();\n                } else {\n                    e.printStackTrace();\n                    e.printStackTrace(errorMessagePS);\n                    Copy_of_TalendBugDemoDB.this.exception = e;\n                }\n            }\n            if (!(e instanceof TalendException)) {\n                try {\n                    for (java.lang.reflect.Method m : this.getClass()\n                             .getEnclosingClass().getMethods()) {\n                        if (m.getName().compareTo(currentComponent + \"_error\") == 0) {\n\t\t\t\t\t\t\tm.invoke(Copy_of_TalendBugDemoDB.this,\n\t\t\t\t\t\t\t\t\tnew Object[] { e, currentComponent,\n\t\t\t\t\t\t\t\t\t\t\tglobalMap });\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(e instanceof TDieException)) {\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tthis.e.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void tDBConnection_1_error(Exception exception,\n\t\t\tString errorComponent, final java.util.Map<String, Object> globalMap)\n\t\t\tthrows TalendException {\n\n\t\tend_Hash.put(errorComponent, System.currentTimeMillis());\n\n\t\tstatus = \"failure\";\n\n\t\ttDBConnection_1_onSubJobError(exception, errorComponent, globalMap);\n\t}\n\n\tpublic void tJava_1_error(Exception exception, String errorComponent,\n\t\t\tfinal java.util.Map<String, Object> globalMap)\n\t\t\tthrows TalendException {\n\n\t\tend_Hash.put(errorComponent, System.currentTimeMillis());\n\n\t\tstatus = \"failure\";\n\n\t\ttJava_1_onSubJobError(exception, errorComponent, globalMap);\n\t}\n\n\tpublic void tDBInput_2_error(Exception exception, String errorComponent,\n\t\t\tfinal java.util.Map<String, Object> globalMap)\n\t\t\tthrows TalendException {\n\n\t\tend_Hash.put(errorComponent, System.currentTimeMillis());\n\n\t\tstatus = \"failure\";\n\n\t\ttDBInput_2_onSubJobError(exception, errorComponent, globalMap);\n\t}\n\n\tpublic void tMap_1_error(Exception exception, String errorComponent,\n\t\t\tfinal java.util.Map<String, Object> globalMap)\n\t\t\tthrows TalendException {\n\n\t\tend_Hash.put(errorComponent, System.currentTimeMillis());\n\n\t\tstatus = \"failure\";\n\n\t\ttDBInput_2_onSubJobError(exception, errorComponent, globalMap);\n\t}\n\n\tpublic void tDBOutput_1_error(Exception exception, String errorComponent,\n\t\t\tfinal java.util.Map<String, Object> globalMap)\n\t\t\tthrows TalendException {\n\n\t\tend_Hash.put(errorComponent, System.currentTimeMillis());\n\n\t\tstatus = \"failure\";\n\n\t\ttDBInput_2_onSubJobError(exception, errorComponent, globalMap);\n\t}\n\n\tpublic void tDBInput_1_error(Exception exception, String errorComponent,\n\t\t\tfinal java.util.Map<String, Object> globalMap)\n\t\t\tthrows TalendException {\n\n\t\tend_Hash.put(errorComponent, System.currentTimeMillis());\n\n\t\tstatus = \"failure\";\n\n\t\ttDBInput_2_onSubJobError(exception, errorComponent, globalMap);\n\t}\n\n\tpublic void tAdvancedHash_row1_error(Exception exception,\n\t\t\tString errorComponent, final java.util.Map<String, Object> globalMap)\n\t\t\tthrows TalendException {\n\n\t\tend_Hash.put(errorComponent, System.currentTimeMillis());\n\n\t\tstatus = \"failure\";\n\n\t\ttDBInput_2_onSubJobError(exception, errorComponent, globalMap);\n\t}\n\n\tpublic void tDBConnection_1_onSubJobError(Exception exception,\n\t\t\tString errorComponent, final java.util.Map<String, Object> globalMap)\n\t\t\tthrows TalendException {\n\n\t\tresumeUtil.addLog(\"SYSTEM_LOG\", \"NODE:\" + errorComponent, \"\", Thread\n\t\t\t\t.currentThread().getId() + \"\", \"FATAL\", \"\",\n\t\t\t\texception.getMessage(),\n\t\t\t\tResumeUtil.getExceptionStackTrace(exception), \"\");\n\n\t}\n\n\tpublic void tJava_1_onSubJobError(Exception exception,\n\t\t\tString errorComponent, final java.util.Map<String, Object> globalMap)\n\t\t\tthrows TalendException {\n\n\t\tresumeUtil.addLog(\"SYSTEM_LOG\", \"NODE:\" + errorComponent, \"\", Thread\n                      .currentThread().getId() + \"\", \"FATAL\", \"\",\n                      exception.getMessage(),\n                      ResumeUtil.getExceptionStackTrace(exception), \"\");\n\n\t}\n\n    public void tDBInput_2_onSubJobError(Exception exception,\n                                         String errorComponent, final java.util.Map<String, Object> globalMap)\n        throws TalendException {\n\n        resumeUtil.addLog(\"SYSTEM_LOG\", \"NODE:\" + errorComponent, \"\", Thread\n                          .currentThread().getId() + \"\", \"FATAL\", \"\",\n                          exception.getMessage(),\n                          ResumeUtil.getExceptionStackTrace(exception), \"\");\n\n    }\n\n    public void tDBConnection_1Process(\n                                       final java.util.Map<String, Object> globalMap)\n        throws TalendException {\n        globalMap.put(\"tDBConnection_1_SUBPROCESS_STATE\", 0);\n\n        final boolean execStat = this.execStat;\n\n        String iterateId = \"\";\n\n        String currentComponent = \"\";\n        java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();\n\n        try {\n            // TDI-39566 avoid throwing an useless Exception\n            boolean resumeIt = true;\n            if (globalResumeTicket == false && resumeEntryMethodName != null) {\n                String currentMethodName = new java.lang.Exception()\n                    .getStackTrace()[0].getMethodName();\n                resumeIt = resumeEntryMethodName.equals(currentMethodName);\n            }\n            if (resumeIt || globalResumeTicket) { // start the resume\n                globalResumeTicket = true;\n\n                /**\n                 * [tDBConnection_1 begin ] start\n                 */\n\n                ok_Hash.put(\"tDBConnection_1\", false);\n                start_Hash.put(\"tDBConnection_1\", System.currentTimeMillis());\n\n                currentComponent = \"tDBConnection_1\";\n\n                int tos_count_tDBConnection_1 = 0;\n\n                if (log.isDebugEnabled())\n                    log.debug(\"tDBConnection_1 - \" + (\"Start to work.\"));\n                if (log.isDebugEnabled()) {\n                    class BytesLimit65535_tDBConnection_1 {\n                        public void limitLog4jByte() throws Exception {\n                            StringBuilder log4jParamters_tDBConnection_1 = new StringBuilder();\n                            log4jParamters_tDBConnection_1\n                                .append(\"Parameters:\");\n                            log4jParamters_tDBConnection_1.append(\"DB_VERSION\"\n                                                                  + \" = \" + \"MYSQL_8\");\n                            log4jParamters_tDBConnection_1.append(\" | \");\n                            log4jParamters_tDBConnection_1.append(\"HOST\"\n                                                                  + \" = \" + \"\\\"localhost\\\"\");\n                            log4jParamters_tDBConnection_1.append(\" | \");\n                            log4jParamters_tDBConnection_1.append(\"PORT\"\n                                                                  + \" = \" + \"\\\"3307\\\"\");\n                            log4jParamters_tDBConnection_1.append(\" | \");\n                            log4jParamters_tDBConnection_1.append(\"DBNAME\"\n                                                                  + \" = \" + \"\\\"jira\\\"\");\n                            log4jParamters_tDBConnection_1.append(\" | \");\n                            log4jParamters_tDBConnection_1.append(\"PROPERTIES\"\n                                                                  + \" = \" + \"\\\"noDatetimeStringSync=true\\\"\");\n                            log4jParamters_tDBConnection_1.append(\" | \");\n                            log4jParamters_tDBConnection_1.append(\"USER\"\n                                                                  + \" = \" + \"\\\"undx\\\"\");\n                            log4jParamters_tDBConnection_1.append(\" | \");\n                            log4jParamters_tDBConnection_1.append(\"PASS\"\n                                                                  + \" = \"\n                                                                  + String.valueOf(\"f4f7aba1746784ea\")\n                                                                  .substring(0, 4) + \"...\");\n                            log4jParamters_tDBConnection_1.append(\" | \");\n                            log4jParamters_tDBConnection_1\n                                .append(\"USE_SHARED_CONNECTION\" + \" = \"\n                                        + \"false\");\n                            log4jParamters_tDBConnection_1.append(\" | \");\n                            log4jParamters_tDBConnection_1\n                                .append(\"SPECIFY_DATASOURCE_ALIAS\" + \" = \"\n                                        + \"false\");\n                            log4jParamters_tDBConnection_1.append(\" | \");\n                            log4jParamters_tDBConnection_1.append(\"AUTO_COMMIT\"\n                                                                  + \" = \" + \"true\");\n                            log4jParamters_tDBConnection_1.append(\" | \");\n                            log4jParamters_tDBConnection_1\n                                .append(\"UNIFIED_COMPONENTS\" + \" = \"\n                                        + \"tMysqlConnection\");\n                            log4jParamters_tDBConnection_1.append(\" | \");\n                            if (log.isDebugEnabled())\n                                log.debug(\"tDBConnection_1 - \"\n                                          + (log4jParamters_tDBConnection_1));\n                        }\n                    }\n                    new BytesLimit65535_tDBConnection_1().limitLog4jByte();\n                }\n\n                String properties_tDBConnection_1 = \"noDatetimeStringSync=true\";\n                if (properties_tDBConnection_1 == null\n                    || properties_tDBConnection_1.trim().length() == 0) {\n                    properties_tDBConnection_1 += \"rewriteBatchedStatements=true\";\n                } else if (properties_tDBConnection_1 != null\n                           && !properties_tDBConnection_1\n                           .contains(\"rewriteBatchedStatements\")) {\n                    properties_tDBConnection_1 += \"&rewriteBatchedStatements=true\";\n                }\n\n                String url_tDBConnection_1 = \"jdbc:mysql://\" + \"localhost\"\n                    + \":\" + \"3307\" + \"/\" + \"jira\" + \"?\"\n                    + properties_tDBConnection_1;\n                String dbUser_tDBConnection_1 = \"undx\";\n\n                final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil\n                    .decryptPassword(\"f4f7aba1746784ea\");\n                String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;\n\n                java.sql.Connection conn_tDBConnection_1 = null;\n\n                String driverClass_tDBConnection_1 = \"com.mysql.cj.jdbc.Driver\";\n                java.lang.Class.forName(driverClass_tDBConnection_1);\n\n                log.debug(\"tDBConnection_1 - Driver ClassName: \"\n                          + driverClass_tDBConnection_1 + \".\");\n\n                log.debug(\"tDBConnection_1 - Connection attempt to '\"\n                          + url_tDBConnection_1 + \"' with the username '\"\n                          + dbUser_tDBConnection_1 + \"'.\");\n\n                conn_tDBConnection_1 = java.sql.DriverManager.getConnection(\n                                                                            url_tDBConnection_1, dbUser_tDBConnection_1,\n                                                                            dbPwd_tDBConnection_1);\n                log.debug(\"tDBConnection_1 - Connection to '\"\n                          + url_tDBConnection_1 + \"' has succeeded.\");\n\n                globalMap.put(\"conn_tDBConnection_1\", conn_tDBConnection_1);\n                if (null != conn_tDBConnection_1) {\n\n                    log.debug(\"tDBConnection_1 - Connection is set auto commit to 'true'.\");\n                    conn_tDBConnection_1.setAutoCommit(true);\n                }\n\n                globalMap.put(\"conn_tDBConnection_1\", conn_tDBConnection_1);\n\n                globalMap.put(\"db_tDBConnection_1\", \"jira\");\n\n                /**\n                 * [tDBConnection_1 begin ] stop\n                 */\n\n                /**\n                 * [tDBConnection_1 main ] start\n                 */\n\n                currentComponent = \"tDBConnection_1\";\n\n                tos_count_tDBConnection_1++;\n\n                /**\n                 * [tDBConnection_1 main ] stop\n                 */\n\n                /**\n                 * [tDBConnection_1 process_data_begin ] start\n                 */\n\n                currentComponent = \"tDBConnection_1\";\n\n                /**\n                 * [tDBConnection_1 process_data_begin ] stop\n                 */\n\n                /**\n                 * [tDBConnection_1 process_data_end ] start\n                 */\n\n                currentComponent = \"tDBConnection_1\";\n\n                /**\n                 * [tDBConnection_1 process_data_end ] stop\n                 */\n\n                /**\n                 * [tDBConnection_1 end ] start\n                 */\n\n                currentComponent = \"tDBConnection_1\";\n\n                if (log.isDebugEnabled())\n                    log.debug(\"tDBConnection_1 - \" + (\"Done.\"));\n\n                ok_Hash.put(\"tDBConnection_1\", true);\n                end_Hash.put(\"tDBConnection_1\", System.currentTimeMillis());\n\n                tJava_1Process(globalMap);\n\n                /**\n                 * [tDBConnection_1 end ] stop\n                 */\n            }// end the resume\n\n        } catch (java.lang.Exception e) {\n\n            if (!(e instanceof TalendException)) {\n                log.fatal(currentComponent + \" \" + e.getMessage(), e);\n            }\n\n            TalendException te = new TalendException(e, currentComponent,\n                                                     globalMap);\n\n            throw te;\n        } catch (java.lang.Error error) {\n\n            throw error;\n        } finally {\n\n            try {\n\n                /**\n                 * [tDBConnection_1 finally ] start\n                 */\n\n                currentComponent = \"tDBConnection_1\";\n\n                /**\n                 * [tDBConnection_1 finally ] stop\n                 */\n            } catch (java.lang.Exception e) {\n                // ignore\n            } catch (java.lang.Error error) {\n                // ignore\n            }\n            resourceMap = null;\n        }\n\n        globalMap.put(\"tDBConnection_1_SUBPROCESS_STATE\", 1);\n    }\n\n    public void tJava_1Process(final java.util.Map<String, Object> globalMap)\n        throws TalendException {\n        globalMap.put(\"tJava_1_SUBPROCESS_STATE\", 0);\n\n        final boolean execStat = this.execStat;\n\n        String iterateId = \"\";\n\n        String currentComponent = \"\";\n        java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();\n\n        try {\n            // TDI-39566 avoid throwing an useless Exception\n            boolean resumeIt = true;\n            if (globalResumeTicket == false && resumeEntryMethodName != null) {\n                String currentMethodName = new java.lang.Exception()\n                    .getStackTrace()[0].getMethodName();\n                resumeIt = resumeEntryMethodName.equals(currentMethodName);\n            }\n            if (resumeIt || globalResumeTicket) { // start the resume\n                globalResumeTicket = true;\n\n                /**\n                 * [tJava_1 begin ] start\n                 */\n\n                ok_Hash.put(\"tJava_1\", false);\n                start_Hash.put(\"tJava_1\", System.currentTimeMillis());\n\n                currentComponent = \"tJava_1\";\n\n                int tos_count_tJava_1 = 0;\n\n                System.out.println(\"Current file.encoding = \"\n                                   + System.getProperty(\"file.encoding\"));\n\n                /**\n                     * [tJava_1 begin ] stop\n                     */\n\n                /**\n                 * [tJava_1 main ] start\n                 */\n\n                currentComponent = \"tJava_1\";\n\n                tos_count_tJava_1++;\n\n                /**\n                 * [tJava_1 main ] stop\n                 */\n\n                /**\n                 * [tJava_1 process_data_begin ] start\n                 */\n\n                currentComponent = \"tJava_1\";\n\n                /**\n                 * [tJava_1 process_data_begin ] stop\n                 */\n\n                /**\n                 * [tJava_1 process_data_end ] start\n                 */\n\n                currentComponent = \"tJava_1\";\n\n                /**\n                 * [tJava_1 process_data_end ] stop\n                 */\n\n                /**\n                 * [tJava_1 end ] start\n                 */\n\n                currentComponent = \"tJava_1\";\n\n                ok_Hash.put(\"tJava_1\", true);\n                end_Hash.put(\"tJava_1\", System.currentTimeMillis());\n\n                tDBInput_2Process(globalMap);\n\n                /**\n                 * [tJava_1 end ] stop\n                 */\n            }// end the resume\n\n        } catch (java.lang.Exception e) {\n\n            if (!(e instanceof TalendException)) {\n                log.fatal(currentComponent + \" \" + e.getMessage(), e);\n            }\n\n            TalendException te = new TalendException(e, currentComponent,\n                                                     globalMap);\n\n            throw te;\n        } catch (java.lang.Error error) {\n\n            throw error;\n        } finally {\n\n            try {\n\n                /**\n                 * [tJava_1 finally ] start\n                 */\n\n                currentComponent = \"tJava_1\";\n\n                /**\n                 * [tJava_1 finally ] stop\n                 */\n            } catch (java.lang.Exception e) {\n                // ignore\n            } catch (java.lang.Error error) {\n                // ignore\n            }\n            resourceMap = null;\n        }\n\n        globalMap.put(\"tJava_1_SUBPROCESS_STATE\", 1);\n    }\n\n    public static class ResultStruct implements\n                                         routines.system.IPersistableRow<ResultStruct> {\n        final static byte[] commonByteArrayLock_DI_DEMOS_Copy_of_TalendBugDemoDB = new byte[0];\n        static byte[] commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB = new byte[0];\n\n        public String ValueA;\n\n        public String getValueA() {\n            return this.ValueA;\n        }\n\n        public String LookupB;\n\n        public String getLookupB() {\n            return this.LookupB;\n        }\n\n        public BigDecimal ID;\n\n        public BigDecimal getID() {\n            return this.ID;\n        }\n\n        private String readString(ObjectInputStream dis) throws IOException {\n            String strReturn = null;\n            int length = 0;\n            length = dis.readInt();\n            if (length == -1) {\n                strReturn = null;\n            } else {\n                if (length > commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB.length) {\n                    if (length < 1024\n                        && commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB.length == 0) {\n                        commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB = new byte[1024];\n                    } else {\n                        commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB = new byte[2 * length];\n                    }\n                }\n                dis.readFully(commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB,\n                              0, length);\n                strReturn = new String(\n                                       commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB, 0,\n                                       length, utf8Charset);\n            }\n            return strReturn;\n        }\n\n        private void writeString(String str, ObjectOutputStream dos)\n            throws IOException {\n            if (str == null) {\n                dos.writeInt(-1);\n            } else {\n                byte[] byteArray = str.getBytes(utf8Charset);\n                dos.writeInt(byteArray.length);\n                dos.write(byteArray);\n            }\n        }\n\n        public void readData(ObjectInputStream dis) {\n\n            synchronized (commonByteArrayLock_DI_DEMOS_Copy_of_TalendBugDemoDB) {\n\n                try {\n\n                    int length = 0;\n\n                    this.ValueA = readString(dis);\n\n                    this.LookupB = readString(dis);\n\n                    this.ID = (BigDecimal) dis.readObject();\n\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n\n                } catch (ClassNotFoundException eCNFE) {\n                    throw new RuntimeException(eCNFE);\n\n                }\n\n            }\n\n        }\n\n        public void writeData(ObjectOutputStream dos) {\n            try {\n\n                // String\n\n                writeString(this.ValueA, dos);\n\n                // String\n\n                writeString(this.LookupB, dos);\n\n                // BigDecimal\n\n                dos.writeObject(this.ID);\n\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n        }\n\n        public String toString() {\n\n            StringBuilder sb = new StringBuilder();\n            sb.append(super.toString());\n            sb.append(\"[\");\n            sb.append(\"ValueA=\" + ValueA);\n            sb.append(\",LookupB=\" + LookupB);\n            sb.append(\",ID=\" + String.valueOf(ID));\n            sb.append(\"]\");\n\n            return sb.toString();\n        }\n\n        public String toLogString() {\n            StringBuilder sb = new StringBuilder();\n\n            if (ValueA == null) {\n                sb.append(\"<null>\");\n            } else {\n                sb.append(ValueA);\n            }\n\n            sb.append(\"|\");\n\n            if (LookupB == null) {\n                sb.append(\"<null>\");\n            } else {\n                sb.append(LookupB);\n            }\n\n            sb.append(\"|\");\n\n            if (ID == null) {\n                sb.append(\"<null>\");\n            } else {\n                sb.append(ID);\n            }\n\n            sb.append(\"|\");\n\n            return sb.toString();\n        }\n\n        /**\n         * Compare keys\n         */\n        public int compareTo(ResultStruct other) {\n\n            int returnValue = -1;\n\n            return returnValue;\n        }\n\n        private int checkNullsAndCompare(Object object1, Object object2) {\n            int returnValue = 0;\n            if (object1 instanceof Comparable && object2 instanceof Comparable) {\n                returnValue = ((Comparable) object1).compareTo(object2);\n            } else if (object1 != null && object2 != null) {\n                returnValue = compareStrings(object1.toString(),\n                                             object2.toString());\n            } else if (object1 == null && object2 != null) {\n                returnValue = 1;\n            } else if (object1 != null && object2 == null) {\n                returnValue = -1;\n            } else {\n                returnValue = 0;\n            }\n\n            return returnValue;\n        }\n\n        private int compareStrings(String string1, String string2) {\n            return string1.compareTo(string2);\n        }\n\n    }\n\n    public static class row2Struct implements\n                                       routines.system.IPersistableRow<row2Struct> {\n        final static byte[] commonByteArrayLock_DI_DEMOS_Copy_of_TalendBugDemoDB = new byte[0];\n        static byte[] commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB = new byte[0];\n\n        public BigDecimal ID;\n\n        public BigDecimal getID() {\n            return this.ID;\n        }\n\n        public String DATA;\n\n        public String getDATA() {\n            return this.DATA;\n        }\n\n        private String readString(ObjectInputStream dis) throws IOException {\n            String strReturn = null;\n            int length = 0;\n            length = dis.readInt();\n            if (length == -1) {\n                strReturn = null;\n            } else {\n                if (length > commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB.length) {\n                    if (length < 1024\n                        && commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB.length == 0) {\n                        commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB = new byte[1024];\n                    } else {\n                        commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB = new byte[2 * length];\n                    }\n                }\n                dis.readFully(commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB,\n                              0, length);\n                strReturn = new String(\n                                       commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB, 0,\n                                       length, utf8Charset);\n            }\n            return strReturn;\n        }\n\n        private void writeString(String str, ObjectOutputStream dos)\n            throws IOException {\n            if (str == null) {\n                dos.writeInt(-1);\n            } else {\n                byte[] byteArray = str.getBytes(utf8Charset);\n                dos.writeInt(byteArray.length);\n                dos.write(byteArray);\n            }\n        }\n\n        public void readData(ObjectInputStream dis) {\n\n            synchronized (commonByteArrayLock_DI_DEMOS_Copy_of_TalendBugDemoDB) {\n\n                try {\n\n                    int length = 0;\n\n                    this.ID = (BigDecimal) dis.readObject();\n\n                    this.DATA = readString(dis);\n\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n\n                } catch (ClassNotFoundException eCNFE) {\n                    throw new RuntimeException(eCNFE);\n\n                }\n\n            }\n\n        }\n\n        public void writeData(ObjectOutputStream dos) {\n            try {\n\n                // BigDecimal\n\n                dos.writeObject(this.ID);\n\n                // String\n\n                writeString(this.DATA, dos);\n\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n        }\n\n        public String toString() {\n\n            StringBuilder sb = new StringBuilder();\n            sb.append(super.toString());\n            sb.append(\"[\");\n            sb.append(\"ID=\" + String.valueOf(ID));\n            sb.append(\",DATA=\" + DATA);\n            sb.append(\"]\");\n\n            return sb.toString();\n        }\n\n        public String toLogString() {\n            StringBuilder sb = new StringBuilder();\n\n            if (ID == null) {\n                sb.append(\"<null>\");\n            } else {\n                sb.append(ID);\n            }\n\n            sb.append(\"|\");\n\n            if (DATA == null) {\n                sb.append(\"<null>\");\n            } else {\n                sb.append(DATA);\n            }\n\n            sb.append(\"|\");\n\n            return sb.toString();\n        }\n\n        /**\n         * Compare keys\n         */\n        public int compareTo(row2Struct other) {\n\n            int returnValue = -1;\n\n            return returnValue;\n        }\n\n        private int checkNullsAndCompare(Object object1, Object object2) {\n            int returnValue = 0;\n            if (object1 instanceof Comparable && object2 instanceof Comparable) {\n                returnValue = ((Comparable) object1).compareTo(object2);\n            } else if (object1 != null && object2 != null) {\n                returnValue = compareStrings(object1.toString(),\n                                             object2.toString());\n            } else if (object1 == null && object2 != null) {\n                returnValue = 1;\n            } else if (object1 != null && object2 == null) {\n                returnValue = -1;\n            } else {\n                returnValue = 0;\n            }\n\n            return returnValue;\n        }\n\n        private int compareStrings(String string1, String string2) {\n\t\t\treturn string1.compareTo(string2);\n\t\t}\n\n\t}\n\n\tpublic static class after_tDBInput_2Struct implements\n\t\t\troutines.system.IPersistableRow<after_tDBInput_2Struct> {\n\t\tfinal static byte[] commonByteArrayLock_DI_DEMOS_Copy_of_TalendBugDemoDB = new byte[0];\n\t\tstatic byte[] commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB = new byte[0];\n\n\t\tpublic BigDecimal ID;\n\n\t\tpublic BigDecimal getID() {\n\t\t\treturn this.ID;\n\t\t}\n\n\t\tpublic String DATA;\n\n\t\tpublic String getDATA() {\n\t\t\treturn this.DATA;\n\t\t}\n\n\t\tprivate String readString(ObjectInputStream dis) throws IOException {\n\t\t\tString strReturn = null;\n\t\t\tint length = 0;\n\t\t\tlength = dis.readInt();\n\t\t\tif (length == -1) {\n\t\t\t\tstrReturn = null;\n\t\t\t} else {\n\t\t\t\tif (length > commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB.length) {\n\t\t\t\t\tif (length < 1024\n\t\t\t\t\t\t\t&& commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB.length == 0) {\n\t\t\t\t\t\tcommonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB = new byte[1024];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcommonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB = new byte[2 * length];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdis.readFully(commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB,\n\t\t\t\t\t\t0, length);\n\t\t\t\tstrReturn = new String(\n\t\t\t\t\t\tcommonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB, 0,\n\t\t\t\t\t\tlength, utf8Charset);\n\t\t\t}\n\t\t\treturn strReturn;\n\t\t}\n\n\t\tprivate void writeString(String str, ObjectOutputStream dos)\n\t\t\t\tthrows IOException {\n\t\t\tif (str == null) {\n\t\t\t\tdos.writeInt(-1);\n\t\t\t} else {\n\t\t\t\tbyte[] byteArray = str.getBytes(utf8Charset);\n\t\t\t\tdos.writeInt(byteArray.length);\n\t\t\t\tdos.write(byteArray);\n\t\t\t}\n\t\t}\n\n\t\tpublic void readData(ObjectInputStream dis) {\n\n\t\t\tsynchronized (commonByteArrayLock_DI_DEMOS_Copy_of_TalendBugDemoDB) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tint length = 0;\n\n\t\t\t\t\tthis.ID = (BigDecimal) dis.readObject();\n\n\t\t\t\t\tthis.DATA = readString(dis);\n\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\n\t\t\t\t} catch (ClassNotFoundException eCNFE) {\n\t\t\t\t\tthrow new RuntimeException(eCNFE);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tpublic void writeData(ObjectOutputStream dos) {\n\t\t\ttry {\n\n\t\t\t\t// BigDecimal\n\n\t\t\t\tdos.writeObject(this.ID);\n\n\t\t\t\t// String\n\n\t\t\t\twriteString(this.DATA, dos);\n\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\n\t\t}\n\n\t\tpublic String toString() {\n\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tsb.append(super.toString());\n\t\t\tsb.append(\"[\");\n\t\t\tsb.append(\"ID=\" + String.valueOf(ID));\n\t\t\tsb.append(\",DATA=\" + DATA);\n\t\t\tsb.append(\"]\");\n\n\t\t\treturn sb.toString();\n\t\t}\n\n\t\tpublic String toLogString() {\n\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\tif (ID == null) {\n\t\t\t\tsb.append(\"<null>\");\n\t\t\t} else {\n\t\t\t\tsb.append(ID);\n\t\t\t}\n\n\t\t\tsb.append(\"|\");\n\n\t\t\tif (DATA == null) {\n\t\t\t\tsb.append(\"<null>\");\n\t\t\t} else {\n\t\t\t\tsb.append(DATA);\n\t\t\t}\n\n\t\t\tsb.append(\"|\");\n\n\t\t\treturn sb.toString();\n\t\t}\n\n\t\t/**\n\t\t * Compare keys\n\t\t */\n\t\tpublic int compareTo(after_tDBInput_2Struct other) {\n\n\t\t\tint returnValue = -1;\n\n\t\t\treturn returnValue;\n\t\t}\n\n\t\tprivate int checkNullsAndCompare(Object object1, Object object2) {\n\t\t\tint returnValue = 0;\n\t\t\tif (object1 instanceof Comparable && object2 instanceof Comparable) {\n          returnValue = ((Comparable) object1).compareTo(object2);\n\t\t\t} else if (object1 != null && object2 != null) {\n          returnValue = compareStrings(object1.toString(),\n                                       object2.toString());\n\t\t\t} else if (object1 == null && object2 != null) {\n          returnValue = 1;\n\t\t\t} else if (object1 != null && object2 == null) {\n          returnValue = -1;\n\t\t\t} else {\n          returnValue = 0;\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t}\n\n      private int compareStrings(String string1, String string2) {\n          return string1.compareTo(string2);\n      }\n\n\t}\n\n    public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)\n        throws TalendException {\n        globalMap.put(\"tDBInput_2_SUBPROCESS_STATE\", 0);\n\n        final boolean execStat = this.execStat;\n\n        String iterateId = \"\";\n\n        String currentComponent = \"\";\n        java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();\n\n        try {\n            // TDI-39566 avoid throwing an useless Exception\n            boolean resumeIt = true;\n            if (globalResumeTicket == false && resumeEntryMethodName != null) {\n                String currentMethodName = new java.lang.Exception()\n                    .getStackTrace()[0].getMethodName();\n                resumeIt = resumeEntryMethodName.equals(currentMethodName);\n            }\n            if (resumeIt || globalResumeTicket) { // start the resume\n                globalResumeTicket = true;\n\n                tDBInput_1Process(globalMap);\n\n                row2Struct row2 = new row2Struct();\n                ResultStruct Result = new ResultStruct();\n\n                /**\n                 * [tDBOutput_1 begin ] start\n                 */\n\n                ok_Hash.put(\"tDBOutput_1\", false);\n                start_Hash.put(\"tDBOutput_1\", System.currentTimeMillis());\n\n                currentComponent = \"tDBOutput_1\";\n\n                int tos_count_tDBOutput_1 = 0;\n\n                if (log.isDebugEnabled())\n                    log.debug(\"tDBOutput_1 - \" + (\"Start to work.\"));\n                if (log.isDebugEnabled()) {\n                    class BytesLimit65535_tDBOutput_1 {\n                        public void limitLog4jByte() throws Exception {\n                            StringBuilder log4jParamters_tDBOutput_1 = new StringBuilder();\n                            log4jParamters_tDBOutput_1.append(\"Parameters:\");\n                            log4jParamters_tDBOutput_1\n                                .append(\"USE_EXISTING_CONNECTION\" + \" = \"\n                                        + \"true\");\n                            log4jParamters_tDBOutput_1.append(\" | \");\n                            log4jParamters_tDBOutput_1.append(\"CONNECTION\"\n                                                              + \" = \" + \"tDBConnection_1\");\n                            log4jParamters_tDBOutput_1.append(\" | \");\n                            log4jParamters_tDBOutput_1.append(\"TABLE\" + \" = \"\n                                                              + \"\\\"TMAP_OUTPUT2\\\"\");\n                            log4jParamters_tDBOutput_1.append(\" | \");\n                            log4jParamters_tDBOutput_1.append(\"TABLE_ACTION\"\n                                                              + \" = \" + \"NONE\");\n                            log4jParamters_tDBOutput_1.append(\" | \");\n                            log4jParamters_tDBOutput_1.append(\"DATA_ACTION\"\n                                                              + \" = \" + \"INSERT\");\n                            log4jParamters_tDBOutput_1.append(\" | \");\n                            log4jParamters_tDBOutput_1.append(\"DIE_ON_ERROR\"\n                                                              + \" = \" + \"false\");\n                            log4jParamters_tDBOutput_1.append(\" | \");\n                            log4jParamters_tDBOutput_1.append(\"EXTENDINSERT\"\n                                                              + \" = \" + \"true\");\n                            log4jParamters_tDBOutput_1.append(\" | \");\n                            log4jParamters_tDBOutput_1\n                                .append(\"NB_ROWS_PER_INSERT\" + \" = \"\n                                        + \"100\");\n                            log4jParamters_tDBOutput_1.append(\" | \");\n                            log4jParamters_tDBOutput_1.append(\"ADD_COLS\"\n                                                              + \" = \" + \"[]\");\n                            log4jParamters_tDBOutput_1.append(\" | \");\n                            log4jParamters_tDBOutput_1\n                                .append(\"USE_FIELD_OPTIONS\" + \" = \"\n                                        + \"false\");\n                            log4jParamters_tDBOutput_1.append(\" | \");\n                            log4jParamters_tDBOutput_1\n                                .append(\"USE_HINT_OPTIONS\" + \" = \"\n                                        + \"false\");\n                            log4jParamters_tDBOutput_1.append(\" | \");\n                            log4jParamters_tDBOutput_1\n                                .append(\"ENABLE_DEBUG_MODE\" + \" = \"\n                                        + \"false\");\n                            log4jParamters_tDBOutput_1.append(\" | \");\n                            log4jParamters_tDBOutput_1\n                                .append(\"ON_DUPLICATE_KEY_UPDATE\" + \" = \"\n                                        + \"false\");\n                            log4jParamters_tDBOutput_1.append(\" | \");\n                            log4jParamters_tDBOutput_1\n                                .append(\"UNIFIED_COMPONENTS\" + \" = \"\n                                        + \"tMysqlOutput\");\n                            log4jParamters_tDBOutput_1.append(\" | \");\n                            if (log.isDebugEnabled())\n                                log.debug(\"tDBOutput_1 - \"\n                                          + (log4jParamters_tDBOutput_1));\n                        }\n                    }\n                    new BytesLimit65535_tDBOutput_1().limitLog4jByte();\n                }\n\n                int nb_line_tDBOutput_1 = 0;\n                int nb_line_update_tDBOutput_1 = 0;\n                int nb_line_inserted_tDBOutput_1 = 0;\n                int nb_line_deleted_tDBOutput_1 = 0;\n                int nb_line_rejected_tDBOutput_1 = 0;\n\n                int deletedCount_tDBOutput_1 = 0;\n                int updatedCount_tDBOutput_1 = 0;\n                int insertedCount_tDBOutput_1 = 0;\n\n                int rejectedCount_tDBOutput_1 = 0;\n\n                String tableName_tDBOutput_1 = \"TMAP_OUTPUT2\";\n                boolean whetherReject_tDBOutput_1 = false;\n\n                java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar\n                    .getInstance();\n                calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);\n                long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime()\n                    .getTime();\n                calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);\n                long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime()\n                    .getTime();\n                long date_tDBOutput_1;\n\n                java.sql.Connection conn_tDBOutput_1 = null;\n                conn_tDBOutput_1 = (java.sql.Connection) globalMap\n                    .get(\"conn_tDBConnection_1\");\n\n                if (log.isDebugEnabled())\n                    log.debug(\"tDBOutput_1 - \"\n                              + (\"Uses an existing connection with username '\")\n                              + (conn_tDBOutput_1.getMetaData().getUserName())\n                              + (\"'. Connection URL: \")\n                              + (conn_tDBOutput_1.getMetaData().getURL()) + (\".\"));\n                if (log.isDebugEnabled())\n                    log.debug(\"tDBOutput_1 - \"\n                              + (\"Connection is set auto commit to '\")\n                              + (conn_tDBOutput_1.getAutoCommit()) + (\"'.\"));\n\n                int count_tDBOutput_1 = 0;\n\n                String insert_tDBOutput_1 = \"INSERT INTO `\" + \"TMAP_OUTPUT2\"\n                    + \"` (`DATA_INPUT`,`DATA_LOOKUP`,`ID`) VALUES (?,?,?)\";\n                int batchSize_tDBOutput_1 = 100;\n                int batchSizeCounter_tDBOutput_1 = 0;\n\n                java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1\n                    .prepareStatement(insert_tDBOutput_1);\n                resourceMap.put(\"pstmt_tDBOutput_1\", pstmt_tDBOutput_1);\n\n                /**\n                 * [tDBOutput_1 begin ] stop\n                 */\n\n                /**\n                 * [tMap_1 begin ] start\n                 */\n\n                ok_Hash.put(\"tMap_1\", false);\n                start_Hash.put(\"tMap_1\", System.currentTimeMillis());\n\n                currentComponent = \"tMap_1\";\n\n                int tos_count_tMap_1 = 0;\n\n                if (log.isDebugEnabled())\n                    log.debug(\"tMap_1 - \" + (\"Start to work.\"));\n                if (log.isDebugEnabled()) {\n                    class BytesLimit65535_tMap_1 {\n                        public void limitLog4jByte() throws Exception {\n                            StringBuilder log4jParamters_tMap_1 = new StringBuilder();\n                            log4jParamters_tMap_1.append(\"Parameters:\");\n                            log4jParamters_tMap_1.append(\"LINK_STYLE\" + \" = \"\n                                                         + \"AUTO\");\n                            log4jParamters_tMap_1.append(\" | \");\n                            log4jParamters_tMap_1\n                                .append(\"TEMPORARY_DATA_DIRECTORY\"\n                                        + \" = \"\n                                        + \"\\\"/home/egallois/tmp/tmap_temp\\\"\");\n                            log4jParamters_tMap_1.append(\" | \");\n                            log4jParamters_tMap_1.append(\"ROWS_BUFFER_SIZE\"\n                                                         + \" = \" + \"2000000\");\n                            log4jParamters_tMap_1.append(\" | \");\n                            log4jParamters_tMap_1\n                                .append(\"CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL\"\n                                        + \" = \" + \"false\");\n                            log4jParamters_tMap_1.append(\" | \");\n                            if (log.isDebugEnabled())\n                                log.debug(\"tMap_1 - \" + (log4jParamters_tMap_1));\n                        }\n                    }\n                    new BytesLimit65535_tMap_1().limitLog4jByte();\n                }\n\n                // ###############################\n                // # Lookup's keys initialization\n                int count_row2_tMap_1 = 0;\n\n                int count_row1_tMap_1 = 0;\n\n                org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) globalMap\n                                                                                                                                                                                                   .get(\"tHash_Lookup_row1\"));\n\n                row1Struct row1HashKey = new row1Struct();\n                row1Struct row1Default = new row1Struct();\n                // ###############################\n\n                // ###############################\n                // # Vars initialization\n                class Var__tMap_1__Struct {\n                }\n                Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();\n                // ###############################\n\n                // ###############################\n                // # Outputs initialization\n                int count_Result_tMap_1 = 0;\n\n                ResultStruct Result_tmp = new ResultStruct();\n                // ###############################\n\n                /**\n                 * [tMap_1 begin ] stop\n                 */\n\n                /**\n                 * [tDBInput_2 begin ] start\n                 */\n\n                ok_Hash.put(\"tDBInput_2\", false);\n                start_Hash.put(\"tDBInput_2\", System.currentTimeMillis());\n\n                currentComponent = \"tDBInput_2\";\n\n                int tos_count_tDBInput_2 = 0;\n\n                if (log.isDebugEnabled())\n                    log.debug(\"tDBInput_2 - \" + (\"Start to work.\"));\n                if (log.isDebugEnabled()) {\n                    class BytesLimit65535_tDBInput_2 {\n                        public void limitLog4jByte() throws Exception {\n                            StringBuilder log4jParamters_tDBInput_2 = new StringBuilder();\n                            log4jParamters_tDBInput_2.append(\"Parameters:\");\n                            log4jParamters_tDBInput_2\n                                .append(\"USE_EXISTING_CONNECTION\" + \" = \"\n                                        + \"true\");\n                            log4jParamters_tDBInput_2.append(\" | \");\n                            log4jParamters_tDBInput_2.append(\"CONNECTION\"\n                                                             + \" = \" + \"tDBConnection_1\");\n                            log4jParamters_tDBInput_2.append(\" | \");\n                            log4jParamters_tDBInput_2.append(\"TABLE\" + \" = \"\n                                                             + \"\\\"\\\"\");\n                            log4jParamters_tDBInput_2.append(\" | \");\n                            log4jParamters_tDBInput_2.append(\"QUERYSTORE\"\n                                                             + \" = \" + \"\\\"\\\"\");\n                            log4jParamters_tDBInput_2.append(\" | \");\n                            log4jParamters_tDBInput_2.append(\"QUERY\" + \" = \"\n                                                             + \"\\\"select id, data  from TMAP_INPUT\\\"\");\n                            log4jParamters_tDBInput_2.append(\" | \");\n                            log4jParamters_tDBInput_2.append(\"ENABLE_STREAM\"\n                                                             + \" = \" + \"false\");\n                            log4jParamters_tDBInput_2.append(\" | \");\n                            log4jParamters_tDBInput_2.append(\"TRIM_ALL_COLUMN\"\n                                                             + \" = \" + \"false\");\n                            log4jParamters_tDBInput_2.append(\" | \");\n                            log4jParamters_tDBInput_2.append(\"TRIM_COLUMN\"\n                                                             + \" = \" + \"[{TRIM=\" + (\"false\")\n                                                             + \", SCHEMA_COLUMN=\" + (\"ID\") + \"}, {TRIM=\"\n                                                             + (\"false\") + \", SCHEMA_COLUMN=\" + (\"DATA\")\n                                                             + \"}]\");\n                            log4jParamters_tDBInput_2.append(\" | \");\n                            log4jParamters_tDBInput_2\n                                .append(\"UNIFIED_COMPONENTS\" + \" = \"\n                                        + \"tMysqlInput\");\n                            log4jParamters_tDBInput_2.append(\" | \");\n                            if (log.isDebugEnabled())\n                                log.debug(\"tDBInput_2 - \"\n                                          + (log4jParamters_tDBInput_2));\n                        }\n                    }\n                    new BytesLimit65535_tDBInput_2().limitLog4jByte();\n                }\n\n                java.util.Calendar calendar_tDBInput_2 = java.util.Calendar\n                    .getInstance();\n                calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);\n                java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();\n                int nb_line_tDBInput_2 = 0;\n                java.sql.Connection conn_tDBInput_2 = null;\n                conn_tDBInput_2 = (java.sql.Connection) globalMap\n                    .get(\"conn_tDBConnection_1\");\n                if (conn_tDBInput_2 != null) {\n                    if (conn_tDBInput_2.getMetaData() != null) {\n\n                        log.debug(\"tDBInput_2 - Uses an existing connection with username '\"\n                                  + conn_tDBInput_2.getMetaData().getUserName()\n                                  + \"'. Connection URL: \"\n                                  + conn_tDBInput_2.getMetaData().getURL() + \".\");\n\n                    }\n                }\n\n                java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2\n                    .createStatement();\n\n                String dbquery_tDBInput_2 = \"select id, data  from TMAP_INPUT\";\n\n                log.debug(\"tDBInput_2 - Executing the query: '\"\n                          + dbquery_tDBInput_2 + \"'.\");\n\n                globalMap.put(\"tDBInput_2_QUERY\", dbquery_tDBInput_2);\n                java.sql.ResultSet rs_tDBInput_2 = null;\n\n                try {\n                    rs_tDBInput_2 = stmt_tDBInput_2\n                        .executeQuery(dbquery_tDBInput_2);\n                    java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2\n                        .getMetaData();\n                    int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2\n                        .getColumnCount();\n\n                    String tmpContent_tDBInput_2 = null;\n\n                    log.debug(\"tDBInput_2 - Retrieving records from the database.\");\n\n                    while (rs_tDBInput_2.next()) {\n                        nb_line_tDBInput_2++;\n\n                        if (colQtyInRs_tDBInput_2 < 1) {\n                            row2.ID = null;\n                        } else {\n\n                            row2.ID = rs_tDBInput_2.getBigDecimal(1);\n                            if (rs_tDBInput_2.wasNull()) {\n                                row2.ID = null;\n                            }\n                        }\n                        if (colQtyInRs_tDBInput_2 < 2) {\n                            row2.DATA = null;\n                        } else {\n\n                            row2.DATA = routines.system.JDBCUtil.getString(\n                                                                           rs_tDBInput_2, 2, false);\n                        }\n\n                        log.debug(\"tDBInput_2 - Retrieving the record \"\n                                  + nb_line_tDBInput_2 + \".\");\n\n                        /**\n                         * [tDBInput_2 begin ] stop\n                         */\n\n                        /**\n                         * [tDBInput_2 main ] start\n                         */\n\n                        currentComponent = \"tDBInput_2\";\n\n                        tos_count_tDBInput_2++;\n\n                        /**\n                         * [tDBInput_2 main ] stop\n                         */\n\n                        /**\n                         * [tDBInput_2 process_data_begin ] start\n                         */\n\n                        currentComponent = \"tDBInput_2\";\n\n                        /**\n                         * [tDBInput_2 process_data_begin ] stop\n                         */\n\n                        /**\n                         * [tMap_1 main ] start\n                         */\n\n                        currentComponent = \"tMap_1\";\n\n                        if (log.isTraceEnabled()) {\n                            log.trace(\"row2 - \"\n                                      + (row2 == null ? \"\" : row2.toLogString()));\n                        }\n\n                        boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;\n\n                        // ###############################\n                        // # Input tables (lookups)\n                        boolean rejectedInnerJoin_tMap_1 = false;\n                        boolean mainRowRejected_tMap_1 = false;\n\n                        // /////////////////////////////////////////////\n                        // Starting Lookup Table \"row1\"\n                        // /////////////////////////////////////////////\n\n                        boolean forceLooprow1 = false;\n\n                        row1Struct row1ObjectFromLookup = null;\n\n                        if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020\n\n                            hasCasePrimitiveKeyWithNull_tMap_1 = false;\n\n                            row1HashKey.ID = row2.ID;\n\n                            row1HashKey.hashCodeDirty = true;\n\n                            tHash_Lookup_row1.lookup(row1HashKey);\n\n                        } // G_TM_M_020\n\n                        if (tHash_Lookup_row1 != null\n                            && tHash_Lookup_row1.getCount(row1HashKey) > 1) { // G\n                            // 071\n\n                            // System.out.println(\"WARNING: UNIQUE MATCH is configured for the lookup 'row1' and it contains more one result from keys :  row1.ID = '\"\n                            // + row1HashKey.ID + \"'\");\n                        } // G 071\n\n                        row1Struct row1 = null;\n\n                        row1Struct fromLookup_row1 = null;\n                        row1 = row1Default;\n\n                        if (tHash_Lookup_row1 != null\n                            && tHash_Lookup_row1.hasNext()) { // G 099\n\n                            fromLookup_row1 = tHash_Lookup_row1.next();\n\n                        } // G 099\n\n                        if (fromLookup_row1 != null) {\n                            row1 = fromLookup_row1;\n                        }\n\n                        // ###############################\n                        { // start of Var scope\n\n                            // ###############################\n                            // # Vars tables\n\n                            Var__tMap_1__Struct Var = Var__tMap_1;// ###############################\n                            // ###############################\n                            // # Output tables\n\n                            Result = null;\n\n                            // # Output table : 'Result'\n                            count_Result_tMap_1++;\n\n                            Result_tmp.ValueA = row2.DATA;\n                            Result_tmp.LookupB = row1.DATA;\n                            Result_tmp.ID = row2.ID;\n                            Result = Result_tmp;\n                            log.debug(\"tMap_1 - Outputting the record \"\n                                      + count_Result_tMap_1\n                                      + \" of the output table 'Result'.\");\n\n                            // ###############################\n\n                        } // end of Var scope\n\n                        rejectedInnerJoin_tMap_1 = false;\n\n                        tos_count_tMap_1++;\n\n                        /**\n                         * [tMap_1 main ] stop\n                         */\n\n                        /**\n                         * [tMap_1 process_data_begin ] start\n                         */\n\n                        currentComponent = \"tMap_1\";\n\n                        /**\n                         * [tMap_1 process_data_begin ] stop\n                         */\n                        // Start of branch \"Result\"\n                        if (Result != null) {\n\n                            /**\n                             * [tDBOutput_1 main ] start\n                             */\n\n                            currentComponent = \"tDBOutput_1\";\n\n                            if (log.isTraceEnabled()) {\n                                log.trace(\"Result - \"\n                                          + (Result == null ? \"\" : Result\n                                             .toLogString()));\n                            }\n\n                            whetherReject_tDBOutput_1 = false;\n                            if (Result.ValueA == null) {\n                                pstmt_tDBOutput_1.setNull(1,\n                                                          java.sql.Types.VARCHAR);\n                            } else {\n                                pstmt_tDBOutput_1.setString(1, Result.ValueA);\n                            }\n\n                            if (Result.LookupB == null) {\n                                pstmt_tDBOutput_1.setNull(2,\n                                                          java.sql.Types.VARCHAR);\n                            } else {\n                                pstmt_tDBOutput_1.setString(2, Result.LookupB);\n                            }\n\n                            pstmt_tDBOutput_1.setBigDecimal(3, Result.ID);\n\n                            pstmt_tDBOutput_1.addBatch();\n                            nb_line_tDBOutput_1++;\n\n                            if (log.isDebugEnabled())\n                                log.debug(\"tDBOutput_1 - \"\n                                          + (\"Adding the record \")\n                                          + (nb_line_tDBOutput_1) + (\" to the \")\n                                          + (\"INSERT\") + (\" batch.\"));\n                            batchSizeCounter_tDBOutput_1++;\n                            if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {\n                                try {\n                                    int countSum_tDBOutput_1 = 0;\n                                    if (log.isDebugEnabled())\n                                        log.debug(\"tDBOutput_1 - \"\n                                                  + (\"Executing the \")\n                                                  + (\"INSERT\") + (\" batch.\"));\n                                    for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1\n                                             .executeBatch()) {\n                                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0\n                                                                 : 1);\n                                    }\n                                    if (log.isDebugEnabled())\n                                        log.debug(\"tDBOutput_1 - \"\n                                                  + (\"The \")\n                                                  + (\"INSERT\")\n                                                  + (\" batch execution has succeeded.\"));\n                                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;\n                                } catch (java.sql.BatchUpdateException e) {\n                                    int countSum_tDBOutput_1 = 0;\n                                    for (int countEach_tDBOutput_1 : e\n                                             .getUpdateCounts()) {\n                                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0\n                                                                 : countEach_tDBOutput_1);\n                                    }\n                                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;\n                                    System.err.println(e.getMessage());\n                                    log.error(\"tDBOutput_1 - \"\n                                              + (e.getMessage()));\n                                }\n\n                                batchSizeCounter_tDBOutput_1 = 0;\n                            }\n\n                            tos_count_tDBOutput_1++;\n\n                            /**\n                             * [tDBOutput_1 main ] stop\n                             */\n\n                            /**\n                             * [tDBOutput_1 process_data_begin ] start\n                             */\n\n                            currentComponent = \"tDBOutput_1\";\n\n                            /**\n                             * [tDBOutput_1 process_data_begin ] stop\n                             */\n\n                            /**\n                             * [tDBOutput_1 process_data_end ] start\n                             */\n\n                            currentComponent = \"tDBOutput_1\";\n\n                            /**\n                             * [tDBOutput_1 process_data_end ] stop\n                             */\n\n                        } // End of branch \"Result\"\n\n                        /**\n                         * [tMap_1 process_data_end ] start\n                         */\n\n                        currentComponent = \"tMap_1\";\n\n                        /**\n                         * [tMap_1 process_data_end ] stop\n                         */\n\n                        /**\n                         * [tDBInput_2 process_data_end ] start\n                         */\n\n                        currentComponent = \"tDBInput_2\";\n\n                        /**\n                         * [tDBInput_2 process_data_end ] stop\n                         */\n\n                        /**\n                         * [tDBInput_2 end ] start\n                         */\n\n                        currentComponent = \"tDBInput_2\";\n\n                    }\n                } finally {\n                    if (rs_tDBInput_2 != null) {\n                        rs_tDBInput_2.close();\n                    }\n                    if (stmt_tDBInput_2 != null) {\n                        stmt_tDBInput_2.close();\n                    }\n                }\n\n                globalMap.put(\"tDBInput_2_NB_LINE\", nb_line_tDBInput_2);\n\n                log.debug(\"tDBInput_2 - Retrieved records count: \"\n                          + nb_line_tDBInput_2 + \" .\");\n\n                if (log.isDebugEnabled())\n                    log.debug(\"tDBInput_2 - \" + (\"Done.\"));\n\n                ok_Hash.put(\"tDBInput_2\", true);\n                end_Hash.put(\"tDBInput_2\", System.currentTimeMillis());\n\n                /**\n                 * [tDBInput_2 end ] stop\n                 */\n\n                /**\n                 * [tMap_1 end ] start\n                 */\n\n                currentComponent = \"tMap_1\";\n\n                // ###############################\n                // # Lookup hashes releasing\n                if (tHash_Lookup_row1 != null) {\n                    tHash_Lookup_row1.endGet();\n                }\n                globalMap.remove(\"tHash_Lookup_row1\");\n\n                // ###############################\n                log.debug(\"tMap_1 - Written records count in the table 'Result': \"\n                          + count_Result_tMap_1 + \".\");\n\n                if (log.isDebugEnabled())\n                    log.debug(\"tMap_1 - \" + (\"Done.\"));\n\n                ok_Hash.put(\"tMap_1\", true);\n                end_Hash.put(\"tMap_1\", System.currentTimeMillis());\n\n                /**\n                 * [tMap_1 end ] stop\n                 */\n\n                /**\n                 * [tDBOutput_1 end ] start\n                 */\n\n                currentComponent = \"tDBOutput_1\";\n\n                try {\n                    if (batchSizeCounter_tDBOutput_1 != 0) {\n                        int countSum_tDBOutput_1 = 0;\n\n                        if (log.isDebugEnabled())\n                            log.debug(\"tDBOutput_1 - \" + (\"Executing the \")\n                                      + (\"INSERT\") + (\" batch.\"));\n                        for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1\n                                 .executeBatch()) {\n                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0\n                                                     : 1);\n                        }\n\n                        if (log.isDebugEnabled())\n                            log.debug(\"tDBOutput_1 - \" + (\"The \") + (\"INSERT\")\n                                      + (\" batch execution has succeeded.\"));\n\n                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;\n\n                    }\n\n                } catch (java.sql.BatchUpdateException e) {\n\n                    int countSum_tDBOutput_1 = 0;\n                    for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {\n                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0\n                                                 : countEach_tDBOutput_1);\n                    }\n\n                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;\n\n                    log.error(\"tDBOutput_1 - \" + (e.getMessage()));\n                    globalMap.put(currentComponent + \"_ERROR_MESSAGE\",\n                                  e.getMessage());\n                    System.err.println(e.getMessage());\n\n                }\n                batchSizeCounter_tDBOutput_1 = 0;\n\n                if (pstmt_tDBOutput_1 != null) {\n\n                    pstmt_tDBOutput_1.close();\n                    resourceMap.remove(\"pstmt_tDBOutput_1\");\n\n                }\n                resourceMap.put(\"statementClosed_tDBOutput_1\", true);\n\n                nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1\n                    + deletedCount_tDBOutput_1;\n                nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1\n                    + updatedCount_tDBOutput_1;\n                nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1\n                    + insertedCount_tDBOutput_1;\n                nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1\n                    + rejectedCount_tDBOutput_1;\n\n                globalMap.put(\"tDBOutput_1_NB_LINE\", nb_line_tDBOutput_1);\n                globalMap.put(\"tDBOutput_1_NB_LINE_UPDATED\",\n                              nb_line_update_tDBOutput_1);\n                globalMap.put(\"tDBOutput_1_NB_LINE_INSERTED\",\n                              nb_line_inserted_tDBOutput_1);\n                globalMap.put(\"tDBOutput_1_NB_LINE_DELETED\",\n                              nb_line_deleted_tDBOutput_1);\n                globalMap.put(\"tDBOutput_1_NB_LINE_REJECTED\",\n                              nb_line_rejected_tDBOutput_1);\n\n                if (log.isDebugEnabled())\n                    log.debug(\"tDBOutput_1 - \" + (\"Has \") + (\"inserted\")\n                              + (\" \") + (nb_line_inserted_tDBOutput_1)\n                              + (\" record(s).\"));\n\n                if (log.isDebugEnabled())\n                    log.debug(\"tDBOutput_1 - \" + (\"Done.\"));\n\n                ok_Hash.put(\"tDBOutput_1\", true);\n                end_Hash.put(\"tDBOutput_1\", System.currentTimeMillis());\n\n                /**\n                 * [tDBOutput_1 end ] stop\n                 */\n\n            }// end the resume\n\n        } catch (java.lang.Exception e) {\n\n            if (!(e instanceof TalendException)) {\n                log.fatal(currentComponent + \" \" + e.getMessage(), e);\n            }\n\n            TalendException te = new TalendException(e, currentComponent,\n                                                     globalMap);\n\n            throw te;\n        } catch (java.lang.Error error) {\n\n            throw error;\n        } finally {\n\n            // free memory for \"tMap_1\"\n            globalMap.remove(\"tHash_Lookup_row1\");\n\n            try {\n\n                /**\n                 * [tDBInput_2 finally ] start\n                 */\n\n                currentComponent = \"tDBInput_2\";\n\n                /**\n                 * [tDBInput_2 finally ] stop\n                 */\n\n                /**\n                 * [tMap_1 finally ] start\n                 */\n\n                currentComponent = \"tMap_1\";\n\n                /**\n                 * [tMap_1 finally ] stop\n                 */\n\n                /**\n                 * [tDBOutput_1 finally ] start\n                 */\n\n                currentComponent = \"tDBOutput_1\";\n\n                if (resourceMap.get(\"statementClosed_tDBOutput_1\") == null) {\n                    java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;\n                    if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap\n                         .remove(\"pstmt_tDBOutput_1\")) != null) {\n                        pstmtToClose_tDBOutput_1.close();\n                    }\n                }\n\n                /**\n                 * [tDBOutput_1 finally ] stop\n                 */\n\n            } catch (java.lang.Exception e) {\n                // ignore\n            } catch (java.lang.Error error) {\n                // ignore\n            }\n            resourceMap = null;\n        }\n\n        globalMap.put(\"tDBInput_2_SUBPROCESS_STATE\", 1);\n    }\n\n    public static class row1Struct implements\n                                       routines.system.IPersistableComparableLookupRow<row1Struct> {\n        final static byte[] commonByteArrayLock_DI_DEMOS_Copy_of_TalendBugDemoDB = new byte[0];\n        static byte[] commonByteArray_DI_DEMOS_Copy_of_TalendBugDemoDB = new byte[0];\n        protected static final int DEFAULT_HASHCODE = 1;\n        protected static final int PRIME = 31;\n        protected int hashCode = DEFAULT_HASHCODE;\n        public boolean hashCodeDirty = true;\n\n        public String loopKey;\n\n        public BigDecimal ID;\n\n        public BigDecimal getID() {\n            return this.ID;\n        }\n\n        public String DATA;\n\n        public String getDATA() {\n            return this.DATA;\n        }\n\n        @Override\n        public int hashCode() {\n            if (this.hashCodeDirty) {\n                final int prime = PRIME;\n                int result = DEFAULT_HASHCODE;\n\n                result = prime * result\n                    + ((this.ID == null) ? 0 : this.ID.hashCode());\n\n                this.hashCode = result;\n                this.hashCodeDirty = false;\n            }\n            return this.hashCode;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj)\n                return true;\n            if (obj == null)\n                return false;\n            if (getClass() != obj.getClass())\n                return false;\n            final row1Struct other = (row1Struct) obj;\n\n            if (this.ID == null) {\n                if (other.ID != null)\n                    return false;\n\n            } else if (!this.ID.equals(other.ID))\n\n                return false;\n\n            return true;\n        }\n\n        public void copyDataTo(row1Struct other) {\n\n            other.ID = this.ID;\n            other.DATA = this.DATA;\n\n        }\n\n        public void copyKeysDataTo(row1Struct other) {\n\n            other.ID = this.ID;\n\n        }\n\n        private String readString(DataInputStream dis, ObjectInputStream ois)\n            throws IOException {\n            String strReturn = null;\n            int length = 0;\n            length = dis.readInt();\n            if (length == -1) {\n                strReturn = null;\n            } else {\n                byte[] byteArray = new byte[length];\n                dis.read(byteArray);\n                strReturn = new String(byteArray, utf8Charset);\n            }\n            return strReturn;\n        }\n\n        private void writeString(String str, DataOutputStream dos,\n                                 ObjectOutputStream oos) throws IOException {\n            if (str == null) {\n                dos.writeInt(-1);\n            } else {\n                byte[] byteArray = str.getBytes(utf8Charset);\n                dos.writeInt(byteArray.length);\n                dos.write(byteArray);\n            }\n        }\n\n        public void readKeysData(ObjectInputStream dis) {\n\n            synchronized (commonByteArrayLock_DI_DEMOS_Copy_of_TalendBugDemoDB) {\n\n                try {\n\n                    int length = 0;\n\n                    this.ID = (BigDecimal) dis.readObject();\n\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n\n                } catch (ClassNotFoundException eCNFE) {\n                    throw new RuntimeException(eCNFE);\n\n                }\n\n            }\n\n        }\n\n        public void writeKeysData(ObjectOutputStream dos) {\n            try {\n\n                // BigDecimal\n\n                dos.writeObject(this.ID);\n\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n        }\n\n        /**\n         * Fill Values data by reading ObjectInputStream.\n         */\n        public void readValuesData(DataInputStream dis, ObjectInputStream ois) {\n            try {\n\n                int length = 0;\n\n                this.DATA = readString(dis, ois);\n\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n\n            }\n\n        }\n\n        /**\n         * Return a byte array which represents Values data.\n         */\n        public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {\n            try {\n\n                writeString(this.DATA, dos, oos);\n\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n        }\n\n        public String toString() {\n\n            StringBuilder sb = new StringBuilder();\n            sb.append(super.toString());\n            sb.append(\"[\");\n            sb.append(\"ID=\" + String.valueOf(ID));\n            sb.append(\",DATA=\" + DATA);\n            sb.append(\"]\");\n\n            return sb.toString();\n        }\n\n        public String toLogString() {\n            StringBuilder sb = new StringBuilder();\n\n            if (ID == null) {\n                sb.append(\"<null>\");\n            } else {\n                sb.append(ID);\n            }\n\n            sb.append(\"|\");\n\n            if (DATA == null) {\n                sb.append(\"<null>\");\n            } else {\n                sb.append(DATA);\n            }\n\n            sb.append(\"|\");\n\n            return sb.toString();\n        }\n\n        /**\n         * Compare keys\n         */\n        public int compareTo(row1Struct other) {\n\n            int returnValue = -1;\n\n            returnValue = checkNullsAndCompare(this.ID, other.ID);\n            if (returnValue != 0) {\n                return returnValue;\n            }\n\n            return returnValue;\n        }\n\n        private int checkNullsAndCompare(Object object1, Object object2) {\n            int returnValue = 0;\n            if (object1 instanceof Comparable && object2 instanceof Comparable) {\n                returnValue = ((Comparable) object1).compareTo(object2);\n            } else if (object1 != null && object2 != null) {\n                returnValue = compareStrings(object1.toString(),\n                                             object2.toString());\n            } else if (object1 == null && object2 != null) {\n                returnValue = 1;\n            } else if (object1 != null && object2 == null) {\n                returnValue = -1;\n            } else {\n                returnValue = 0;\n            }\n\n            return returnValue;\n        }\n\n        private int compareStrings(String string1, String string2) {\n            return string1.compareTo(string2);\n        }\n\n    }\n\n    public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)\n        throws TalendException {\n        globalMap.put(\"tDBInput_1_SUBPROCESS_STATE\", 0);\n\n        final boolean execStat = this.execStat;\n\n        String iterateId = \"\";\n\n        String currentComponent = \"\";\n\t\tjava.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();\n\n\t\ttry {\n\t\t\t// TDI-39566 avoid throwing an useless Exception\n\t\t\tboolean resumeIt = true;\n\t\t\tif (globalResumeTicket == false && resumeEntryMethodName != null) {\n\t\t\t\tString currentMethodName = new java.lang.Exception()\n\t\t\t\t\t\t.getStackTrace()[0].getMethodName();\n\t\t\t\tresumeIt = resumeEntryMethodName.equals(currentMethodName);\n\t\t\t}\n\t\t\tif (resumeIt || globalResumeTicket) { // start the resume\n\t\t\t\tglobalResumeTicket = true;\n\n\t\t\t\trow1Struct row1 = new row1Struct();\n\n\t\t\t\t/**\n\t\t\t\t * [tAdvancedHash_row1 begin ] start\n\t\t\t\t */\n\n\t\t\t\tok_Hash.put(\"tAdvancedHash_row1\", false);\n\t\t\t\tstart_Hash\n\t\t\t\t\t\t.put(\"tAdvancedHash_row1\", System.currentTimeMillis());\n\n\t\t\t\tcurrentComponent = \"tAdvancedHash_row1\";\n\n\t\t\t\tint tos_count_tAdvancedHash_row1 = 0;\n\n\t\t\t\t// connection name:row1\n\t\t\t\t// source node:tDBInput_1 - inputs:(after_tDBInput_2)\n\t\t\t\t// outputs:(row1,row1) | target node:tAdvancedHash_row1 -\n\t\t\t\t// inputs:(row1) outputs:()\n\t\t\t\t// linked node: tMap_1 - inputs:(row2,row1) outputs:(Result)\n\n\t\t\t\torg.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;\n\n\t\t\t\torg.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup\n\t\t\t\t\t\t.<row1Struct> getLookup(matchingModeEnum_row1);\n\n\t\t\t\tglobalMap.put(\"tHash_Lookup_row1\", tHash_Lookup_row1);\n\n\t\t\t\t/**\n\t\t\t\t * [tAdvancedHash_row1 begin ] stop\n\t\t\t\t */\n\n\t\t\t\t/**\n\t\t\t\t * [tDBInput_1 begin ] start\n\t\t\t\t */\n\n\t\t\t\tok_Hash.put(\"tDBInput_1\", false);\n\t\t\t\tstart_Hash.put(\"tDBInput_1\", System.currentTimeMillis());\n\n\t\t\t\tcurrentComponent = \"tDBInput_1\";\n\n\t\t\t\tint tos_count_tDBInput_1 = 0;\n\n\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\tlog.debug(\"tDBInput_1 - \" + (\"Start to work.\"));\n\t\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\t\tclass BytesLimit65535_tDBInput_1 {\n\t\t\t\t\t\tpublic void limitLog4jByte() throws Exception {\n\t\t\t\t\t\t\tStringBuilder log4jParamters_tDBInput_1 = new StringBuilder();\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\"Parameters:\");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1\n\t\t\t\t\t\t\t\t\t.append(\"USE_EXISTING_CONNECTION\" + \" = \"\n\t\t\t\t\t\t\t\t\t\t\t+ \"true\");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\" | \");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\"CONNECTION\"\n\t\t\t\t\t\t\t\t\t+ \" = \" + \"tDBConnection_1\");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\" | \");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\"TABLE\" + \" = \"\n\t\t\t\t\t\t\t\t\t+ \"\\\"\\\"\");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\" | \");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\"QUERYSTORE\"\n\t\t\t\t\t\t\t\t\t+ \" = \" + \"\\\"\\\"\");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\" | \");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1\n\t\t\t\t\t\t\t\t\t.append(\"QUERY\"\n\t\t\t\t\t\t\t\t\t\t\t+ \" = \"\n\t\t\t\t\t\t\t\t\t\t\t+ \"\\\"select  id,  data from TMAP_LOOKUP\\\" \");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\" | \");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\"ENABLE_STREAM\"\n\t\t\t\t\t\t\t\t\t+ \" = \" + \"false\");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\" | \");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\"TRIM_ALL_COLUMN\"\n\t\t\t\t\t\t\t\t\t+ \" = \" + \"false\");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\" | \");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\"TRIM_COLUMN\"\n\t\t\t\t\t\t\t\t\t+ \" = \" + \"[{TRIM=\" + (\"false\")\n\t\t\t\t\t\t\t\t\t+ \", SCHEMA_COLUMN=\" + (\"ID\") + \"}, {TRIM=\"\n\t\t\t\t\t\t\t\t\t+ (\"false\") + \", SCHEMA_COLUMN=\" + (\"DATA\")\n\t\t\t\t\t\t\t\t\t+ \"}]\");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\" | \");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1\n\t\t\t\t\t\t\t\t\t.append(\"UNIFIED_COMPONENTS\" + \" = \"\n\t\t\t\t\t\t\t\t\t\t\t+ \"tMysqlInput\");\n\t\t\t\t\t\t\tlog4jParamters_tDBInput_1.append(\" | \");\n\t\t\t\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\t\t\t\tlog.debug(\"tDBInput_1 - \"\n\t\t\t\t\t\t\t\t\t\t+ (log4jParamters_tDBInput_1));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnew BytesLimit65535_tDBInput_1().limitLog4jByte();\n\t\t\t\t}\n\n\t\t\t\tjava.util.Calendar calendar_tDBInput_1 = java.util.Calendar\n\t\t\t\t\t\t.getInstance();\n\t\t\t\tcalendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);\n\t\t\t\tjava.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();\n\t\t\t\tint nb_line_tDBInput_1 = 0;\n\t\t\t\tjava.sql.Connection conn_tDBInput_1 = null;\n\t\t\t\tconn_tDBInput_1 = (java.sql.Connection) globalMap\n\t\t\t\t\t\t.get(\"conn_tDBConnection_1\");\n\t\t\t\tif (conn_tDBInput_1 != null) {\n\t\t\t\t\tif (conn_tDBInput_1.getMetaData() != null) {\n\n\t\t\t\t\t\tlog.debug(\"tDBInput_1 - Uses an existing connection with username '\"\n\t\t\t\t\t\t\t\t+ conn_tDBInput_1.getMetaData().getUserName()\n\t\t\t\t\t\t\t\t+ \"'. Connection URL: \"\n\t\t\t\t\t\t\t\t+ conn_tDBInput_1.getMetaData().getURL() + \".\");\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tjava.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1\n\t\t\t\t\t\t.createStatement();\n\n\t\t\t\tString dbquery_tDBInput_1 = \"select  id,  data from TMAP_LOOKUP\";\n\n\t\t\t\tlog.debug(\"tDBInput_1 - Executing the query: '\"\n\t\t\t\t\t\t+ dbquery_tDBInput_1 + \"'.\");\n\n\t\t\t\tglobalMap.put(\"tDBInput_1_QUERY\", dbquery_tDBInput_1);\n\t\t\t\tjava.sql.ResultSet rs_tDBInput_1 = null;\n\n\t\t\t\ttry {\n\t\t\t\t\trs_tDBInput_1 = stmt_tDBInput_1\n\t\t\t\t\t\t\t.executeQuery(dbquery_tDBInput_1);\n\t\t\t\t\tjava.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1\n\t\t\t\t\t\t\t.getMetaData();\n\t\t\t\t\tint colQtyInRs_tDBInput_1 = rsmd_tDBInput_1\n\t\t\t\t\t\t\t.getColumnCount();\n\n\t\t\t\t\tString tmpContent_tDBInput_1 = null;\n\n\t\t\t\t\tlog.debug(\"tDBInput_1 - Retrieving records from the database.\");\n\n\t\t\t\t\twhile (rs_tDBInput_1.next()) {\n\t\t\t\t\t\tnb_line_tDBInput_1++;\n\n\t\t\t\t\t\tif (colQtyInRs_tDBInput_1 < 1) {\n\t\t\t\t\t\t\trow1.ID = null;\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\trow1.ID = rs_tDBInput_1.getBigDecimal(1);\n\t\t\t\t\t\t\tif (rs_tDBInput_1.wasNull()) {\n\t\t\t\t\t\t\t\trow1.ID = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (colQtyInRs_tDBInput_1 < 2) {\n\t\t\t\t\t\t\trow1.DATA = null;\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\trow1.DATA = routines.system.JDBCUtil.getString(\n\t\t\t\t\t\t\t\t\trs_tDBInput_1, 2, false);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlog.debug(\"tDBInput_1 - Retrieving the record \"\n\t\t\t\t\t\t\t\t+ nb_line_tDBInput_1 + \".\");\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * [tDBInput_1 begin ] stop\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * [tDBInput_1 main ] start\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\tcurrentComponent = \"tDBInput_1\";\n\n\t\t\t\t\t\ttos_count_tDBInput_1++;\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * [tDBInput_1 main ] stop\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * [tDBInput_1 process_data_begin ] start\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\tcurrentComponent = \"tDBInput_1\";\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * [tDBInput_1 process_data_begin ] stop\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * [tAdvancedHash_row1 main ] start\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\tcurrentComponent = \"tAdvancedHash_row1\";\n\n\t\t\t\t\t\tif (log.isTraceEnabled()) {\n\t\t\t\t\t\t\tlog.trace(\"row1 - \"\n\t\t\t\t\t\t\t\t\t+ (row1 == null ? \"\" : row1.toLogString()));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trow1Struct row1_HashRow = new row1Struct();\n\n\t\t\t\t\t\trow1_HashRow.ID = row1.ID;\n\n\t\t\t\t\t\trow1_HashRow.DATA = row1.DATA;\n\n\t\t\t\t\t\ttHash_Lookup_row1.put(row1_HashRow);\n\n\t\t\t\t\t\ttos_count_tAdvancedHash_row1++;\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * [tAdvancedHash_row1 main ] stop\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * [tAdvancedHash_row1 process_data_begin ] start\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\tcurrentComponent = \"tAdvancedHash_row1\";\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * [tAdvancedHash_row1 process_data_begin ] stop\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * [tAdvancedHash_row1 process_data_end ] start\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\tcurrentComponent = \"tAdvancedHash_row1\";\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * [tAdvancedHash_row1 process_data_end ] stop\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * [tDBInput_1 process_data_end ] start\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\tcurrentComponent = \"tDBInput_1\";\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * [tDBInput_1 process_data_end ] stop\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * [tDBInput_1 end ] start\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\tcurrentComponent = \"tDBInput_1\";\n\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (rs_tDBInput_1 != null) {\n\t\t\t\t\t\trs_tDBInput_1.close();\n\t\t\t\t\t}\n\t\t\t\t\tif (stmt_tDBInput_1 != null) {\n\t\t\t\t\t\tstmt_tDBInput_1.close();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tglobalMap.put(\"tDBInput_1_NB_LINE\", nb_line_tDBInput_1);\n\n\t\t\t\tlog.debug(\"tDBInput_1 - Retrieved records count: \"\n\t\t\t\t\t\t+ nb_line_tDBInput_1 + \" .\");\n\n\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\tlog.debug(\"tDBInput_1 - \" + (\"Done.\"));\n\n\t\t\t\tok_Hash.put(\"tDBInput_1\", true);\n\t\t\t\tend_Hash.put(\"tDBInput_1\", System.currentTimeMillis());\n\n\t\t\t\t/**\n\t\t\t\t * [tDBInput_1 end ] stop\n\t\t\t\t */\n\n\t\t\t\t/**\n\t\t\t\t * [tAdvancedHash_row1 end ] start\n\t\t\t\t */\n\n\t\t\t\tcurrentComponent = \"tAdvancedHash_row1\";\n\n\t\t\t\ttHash_Lookup_row1.endPut();\n\n\t\t\t\tok_Hash.put(\"tAdvancedHash_row1\", true);\n\t\t\t\tend_Hash.put(\"tAdvancedHash_row1\", System.currentTimeMillis());\n\n\t\t\t\t/**\n\t\t\t\t * [tAdvancedHash_row1 end ] stop\n\t\t\t\t */\n\n\t\t\t}// end the resume\n\n\t\t} catch (java.lang.Exception e) {\n\n\t\t\tif (!(e instanceof TalendException)) {\n\t\t\t\tlog.fatal(currentComponent + \" \" + e.getMessage(), e);\n\t\t\t}\n\n\t\t\tTalendException te = new TalendException(e, currentComponent,\n\t\t\t\t\tglobalMap);\n\n\t\t\tthrow te;\n\t\t} catch (java.lang.Error error) {\n\n\t\t\tthrow error;\n\t\t} finally {\n\n\t\t\ttry {\n\n\t\t\t\t/**\n\t\t\t\t * [tDBInput_1 finally ] start\n\t\t\t\t */\n\n\t\t\t\tcurrentComponent = \"tDBInput_1\";\n\n\t\t\t\t/**\n\t\t\t\t * [tDBInput_1 finally ] stop\n\t\t\t\t */\n\n\t\t\t\t/**\n\t\t\t\t * [tAdvancedHash_row1 finally ] start\n\t\t\t\t */\n\n\t\t\t\tcurrentComponent = \"tAdvancedHash_row1\";\n\n\t\t\t\t/**\n\t\t\t\t * [tAdvancedHash_row1 finally ] stop\n\t\t\t\t */\n\n\t\t\t} catch (java.lang.Exception e) {\n\t\t\t\t// ignore\n\t\t\t} catch (java.lang.Error error) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\tresourceMap = null;\n\t\t}\n\n\t\tglobalMap.put(\"tDBInput_1_SUBPROCESS_STATE\", 1);\n\t}\n\n\tpublic String resuming_logs_dir_path = null;\n\tpublic String resuming_checkpoint_path = null;\n\tpublic String parent_part_launcher = null;\n\tprivate String resumeEntryMethodName = null;\n\tprivate boolean globalResumeTicket = false;\n\n\tpublic boolean watch = false;\n\t// portStats is null, it means don't execute the statistics\n\tpublic Integer portStats = null;\n\tpublic int portTraces = 4334;\n\tpublic String clientHost;\n\tpublic String defaultClientHost = \"localhost\";\n\tpublic String contextStr = \"Default\";\n\tpublic boolean isDefaultContext = true;\n\tpublic String pid = \"0\";\n\tpublic String rootPid = null;\n\tpublic String fatherPid = null;\n\tpublic String fatherNode = null;\n\tpublic long startTime = 0;\n\tpublic boolean isChildJob = false;\n\tpublic String log4jLevel = \"\";\n\n\tprivate boolean execStat = true;\n\n\tprivate ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {\n\t\tprotected java.util.Map<String, String> initialValue() {\n\t\t\tjava.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();\n\t\t\tthreadRunResultMap.put(\"errorCode\", null);\n\t\t\tthreadRunResultMap.put(\"status\", \"\");\n\t\t\treturn threadRunResultMap;\n\t\t};\n\t};\n\n\tprivate PropertiesWithType context_param = new PropertiesWithType();\n\tpublic java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();\n\n\tpublic String status = \"\";\n\n\tpublic static void main(String[] args) {\n\t\tfinal Copy_of_TalendBugDemoDB Copy_of_TalendBugDemoDBClass = new Copy_of_TalendBugDemoDB();\n\n\t\tint exitCode = Copy_of_TalendBugDemoDBClass.runJobInTOS(args);\n\t\tif (exitCode == 0) {\n\t\t\tlog.info(\"TalendJob: 'Copy_of_TalendBugDemoDB' - Done.\");\n\t\t}\n\n\t\tSystem.exit(exitCode);\n\t}\n\n\tpublic String[][] runJob(String[] args) {\n\n\t\tint exitCode = runJobInTOS(args);\n\t\tString[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };\n\n\t\treturn bufferValue;\n\t}\n\n\tpublic boolean hastBufferOutputComponent() {\n\t\tboolean hastBufferOutput = false;\n\n\t\treturn hastBufferOutput;\n\t}\n\n\tpublic int runJobInTOS(String[] args) {\n\t\t// reset status\n\t\tstatus = \"\";\n\n\t\tString lastStr = \"\";\n\t\tfor (String arg : args) {\n\t\t\tif (arg.equalsIgnoreCase(\"--context_param\")) {\n\t\t\t\tlastStr = arg;\n\t\t\t} else if (lastStr.equals(\"\")) {\n\t\t\t\tevalParam(arg);\n\t\t\t} else {\n\t\t\t\tevalParam(lastStr + \" \" + arg);\n\t\t\t\tlastStr = \"\";\n\t\t\t}\n\t\t}\n\n\t\tif (!\"\".equals(log4jLevel)) {\n\t\t\tif (\"trace\".equalsIgnoreCase(log4jLevel)) {\n\t\t\t\tlog.setLevel(org.apache.log4j.Level.TRACE);\n\t\t\t} else if (\"debug\".equalsIgnoreCase(log4jLevel)) {\n\t\t\t\tlog.setLevel(org.apache.log4j.Level.DEBUG);\n\t\t\t} else if (\"info\".equalsIgnoreCase(log4jLevel)) {\n\t\t\t\tlog.setLevel(org.apache.log4j.Level.INFO);\n\t\t\t} else if (\"warn\".equalsIgnoreCase(log4jLevel)) {\n\t\t\t\tlog.setLevel(org.apache.log4j.Level.WARN);\n\t\t\t} else if (\"error\".equalsIgnoreCase(log4jLevel)) {\n\t\t\t\tlog.setLevel(org.apache.log4j.Level.ERROR);\n\t\t\t} else if (\"fatal\".equalsIgnoreCase(log4jLevel)) {\n\t\t\t\tlog.setLevel(org.apache.log4j.Level.FATAL);\n\t\t\t} else if (\"off\".equalsIgnoreCase(log4jLevel)) {\n\t\t\t\tlog.setLevel(org.apache.log4j.Level.OFF);\n\t\t\t}\n\t\t\torg.apache.log4j.Logger.getRootLogger().setLevel(log.getLevel());\n\t\t}\n\t\tlog.info(\"TalendJob: 'Copy_of_TalendBugDemoDB' - Start.\");\n\n\t\tif (clientHost == null) {\n\t\t\tclientHost = defaultClientHost;\n\t\t}\n\n\t\tif (pid == null || \"0\".equals(pid)) {\n\t\t\tpid = TalendString.getAsciiRandomString(6);\n\t\t}\n\n\t\tif (rootPid == null) {\n\t\t\trootPid = pid;\n\t\t}\n\t\tif (fatherPid == null) {\n\t\t\tfatherPid = pid;\n\t\t} else {\n\t\t\tisChildJob = true;\n\t\t}\n\n\t\ttry {\n\t\t\t// call job/subjob with an existing context, like:\n\t\t\t// --context=production. if without this parameter, there will use\n\t\t\t// the default context instead.\n\t\t\tjava.io.InputStream inContext = Copy_of_TalendBugDemoDB.class\n\t\t\t\t\t.getClassLoader().getResourceAsStream(\n\t\t\t\t\t\t\t\"di_demos/copy_of_talendbugdemodb_0_1/contexts/\"\n\t\t\t\t\t\t\t\t\t+ contextStr + \".properties\");\n\t\t\tif (inContext == null) {\n\t\t\t\tinContext = Copy_of_TalendBugDemoDB.class\n\t\t\t\t\t\t.getClassLoader()\n\t\t\t\t\t\t.getResourceAsStream(\n\t\t\t\t\t\t\t\t\"config/contexts/\" + contextStr + \".properties\");\n\t\t\t}\n\t\t\tif (inContext != null && context != null && context.isEmpty()) {\n\t\t\t\t// defaultProps is in order to keep the original context value\n\t\t\t\tdefaultProps.load(inContext);\n\t\t\t\tinContext.close();\n\t\t\t\tcontext = new ContextProperties(defaultProps);\n\t\t\t} else if (!isDefaultContext) {\n\t\t\t\t// print info and job continue to run, for case: context_param\n\t\t\t\t// is not empty.\n\t\t\t\tSystem.err.println(\"Could not find the context \" + contextStr);\n\t\t\t}\n\n\t\t\tif (!context_param.isEmpty()) {\n\t\t\t\tcontext.putAll(context_param);\n\t\t\t\t// set types for params from parentJobs\n\t\t\t\tfor (Object key : context_param.keySet()) {\n\t\t\t\t\tString context_key = key.toString();\n\t\t\t\t\tString context_type = context_param\n\t\t\t\t\t\t\t.getContextType(context_key);\n\t\t\t\t\tcontext.setContextType(context_key, context_type);\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tclass ContextProcessing {\n\t\t\t\tprivate void processContext_0() {\n\t\t\t\t}\n\n\t\t\t\tpublic void processAllContext() {\n\t\t\t\t\tprocessContext_0();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnew ContextProcessing().processAllContext();\n\t\t} catch (java.io.IOException ie) {\n\t\t\tSystem.err.println(\"Could not load context \" + contextStr);\n\t\t\tie.printStackTrace();\n\t\t}\n\n\t\t// get context value from parent directly\n\t\tif (parentContextMap != null && !parentContextMap.isEmpty()) {\n\t\t}\n\n\t\t// Resume: init the resumeUtil\n\t\tresumeEntryMethodName = ResumeUtil\n\t\t\t\t.getResumeEntryMethodName(resuming_checkpoint_path);\n\t\tresumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);\n\t\tresumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,\n\t\t\t\tjobName, contextStr, jobVersion);\n\n\t\tList<String> parametersToEncrypt = new java.util.ArrayList<String>();\n\t\t// Resume: jobStart\n\t\tresumeUtil.addLog(\"JOB_STARTED\", \"JOB:\" + jobName,\n\t\t\t\tparent_part_launcher, Thread.currentThread().getId() + \"\", \"\",\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t\tresumeUtil.convertToJsonText(context, parametersToEncrypt));\n\n\t\tjava.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();\n\t\tglobalMap.put(\"concurrentHashMap\", concurrentHashMap);\n\n\t\tlong startUsedMemory = Runtime.getRuntime().totalMemory()\n\t\t\t\t- Runtime.getRuntime().freeMemory();\n\t\tlong endUsedMemory = 0;\n\t\tlong end = 0;\n\n\t\tstartTime = System.currentTimeMillis();\n\n\t\tthis.globalResumeTicket = true;// to run tPreJob\n\n\t\tthis.globalResumeTicket = false;// to run others jobs\n\n\t\ttry {\n\t\t\terrorCode = null;\n\t\t\ttDBConnection_1Process(globalMap);\n\t\t\tif (!\"failure\".equals(status)) {\n\t\t\t\tstatus = \"end\";\n\t\t\t}\n\t\t} catch (TalendException e_tDBConnection_1) {\n\t\t\tglobalMap.put(\"tDBConnection_1_SUBPROCESS_STATE\", -1);\n\n\t\t\te_tDBConnection_1.printStackTrace();\n\n\t\t}\n\n\t\tthis.globalResumeTicket = true;// to run tPostJob\n\n\t\tend = System.currentTimeMillis();\n\n\t\tif (watch) {\n\t\t\tSystem.out.println((end - startTime) + \" milliseconds\");\n\t\t}\n\n\t\tendUsedMemory = Runtime.getRuntime().totalMemory()\n\t\t\t\t- Runtime.getRuntime().freeMemory();\n\t\tif (false) {\n\t\t\tSystem.out\n\t\t\t\t\t.println((endUsedMemory - startUsedMemory)\n\t\t\t\t\t\t\t+ \" bytes memory increase when running : Copy_of_TalendBugDemoDB\");\n\t\t}\n\n\t\tint returnCode = 0;\n\t\tif (errorCode == null) {\n\t\t\treturnCode = status != null && status.equals(\"failure\") ? 1 : 0;\n\t\t} else {\n\t\t\treturnCode = errorCode.intValue();\n\t\t}\n\t\tresumeUtil.addLog(\"JOB_ENDED\", \"JOB:\" + jobName, parent_part_launcher,\n\t\t\t\tThread.currentThread().getId() + \"\", \"\", \"\" + returnCode, \"\",\n\t\t\t\t\"\", \"\");\n\n\t\treturn returnCode;\n\n\t}\n\n\t// only for OSGi env\n\tpublic void destroy() {\n\t\tcloseSqlDbConnections();\n\n\t}\n\n\tprivate void closeSqlDbConnections() {\n\t\ttry {\n\t\t\tObject obj_conn;\n\t\t\tobj_conn = globalMap.remove(\"conn_tDBConnection_1\");\n\t\t\tif (null != obj_conn) {\n\t\t\t\t((java.sql.Connection) obj_conn).close();\n\t\t\t}\n\t\t} catch (java.lang.Exception e) {\n\t\t}\n\t}\n\n\tprivate java.util.Map<String, Object> getSharedConnections4REST() {\n\t\tjava.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();\n\t\tconnections.put(\"conn_tDBConnection_1\",\n\t\t\t\tglobalMap.get(\"conn_tDBConnection_1\"));\n\n\t\treturn connections;\n\t}\n\n\tprivate void evalParam(String arg) {\n\t\tif (arg.startsWith(\"--resuming_logs_dir_path\")) {\n\t\t\tresuming_logs_dir_path = arg.substring(25);\n\t\t} else if (arg.startsWith(\"--resuming_checkpoint_path\")) {\n\t\t\tresuming_checkpoint_path = arg.substring(27);\n\t\t} else if (arg.startsWith(\"--parent_part_launcher\")) {\n\t\t\tparent_part_launcher = arg.substring(23);\n\t\t} else if (arg.startsWith(\"--watch\")) {\n\t\t\twatch = true;\n\t\t} else if (arg.startsWith(\"--stat_port=\")) {\n\t\t\tString portStatsStr = arg.substring(12);\n\t\t\tif (portStatsStr != null && !portStatsStr.equals(\"null\")) {\n\t\t\t\tportStats = Integer.parseInt(portStatsStr);\n\t\t\t}\n\t\t} else if (arg.startsWith(\"--trace_port=\")) {\n\t\t\tportTraces = Integer.parseInt(arg.substring(13));\n\t\t} else if (arg.startsWith(\"--client_host=\")) {\n\t\t\tclientHost = arg.substring(14);\n\t\t} else if (arg.startsWith(\"--context=\")) {\n\t\t\tcontextStr = arg.substring(10);\n\t\t\tisDefaultContext = false;\n\t\t} else if (arg.startsWith(\"--father_pid=\")) {\n\t\t\tfatherPid = arg.substring(13);\n\t\t} else if (arg.startsWith(\"--root_pid=\")) {\n\t\t\trootPid = arg.substring(11);\n\t\t} else if (arg.startsWith(\"--father_node=\")) {\n\t\t\tfatherNode = arg.substring(14);\n\t\t} else if (arg.startsWith(\"--pid=\")) {\n\t\t\tpid = arg.substring(6);\n\t\t} else if (arg.startsWith(\"--context_type\")) {\n\t\t\tString keyValue = arg.substring(15);\n\t\t\tint index = -1;\n\t\t\tif (keyValue != null && (index = keyValue.indexOf('=')) > -1) {\n\t\t\t\tif (fatherPid == null) {\n\t\t\t\t\tcontext_param.setContextType(keyValue.substring(0, index),\n\t\t\t\t\t\t\treplaceEscapeChars(keyValue.substring(index + 1)));\n\t\t\t\t} else { // the subjob won't escape the especial chars\n\t\t\t\t\tcontext_param.setContextType(keyValue.substring(0, index),\n\t\t\t\t\t\t\tkeyValue.substring(index + 1));\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if (arg.startsWith(\"--context_param\")) {\n\t\t\tString keyValue = arg.substring(16);\n\t\t\tint index = -1;\n\t\t\tif (keyValue != null && (index = keyValue.indexOf('=')) > -1) {\n\t\t\t\tif (fatherPid == null) {\n\t\t\t\t\tcontext_param.put(keyValue.substring(0, index),\n\t\t\t\t\t\t\treplaceEscapeChars(keyValue.substring(index + 1)));\n\t\t\t\t} else { // the subjob won't escape the especial chars\n\t\t\t\t\tcontext_param.put(keyValue.substring(0, index),\n\t\t\t\t\t\t\tkeyValue.substring(index + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (arg.startsWith(\"--log4jLevel=\")) {\n\t\t\tlog4jLevel = arg.substring(13);\n\t\t}\n\n\t}\n\n\tprivate static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = \"<TALEND_NULL>\";\n\n\tprivate final String[][] escapeChars = { { \"\\\\\\\\\", \"\\\\\" }, { \"\\\\n\", \"\\n\" },\n\t\t\t{ \"\\\\'\", \"\\'\" }, { \"\\\\r\", \"\\r\" }, { \"\\\\f\", \"\\f\" }, { \"\\\\b\", \"\\b\" },\n\t\t\t{ \"\\\\t\", \"\\t\" } };\n\n\tprivate String replaceEscapeChars(String keyValue) {\n\n\t\tif (keyValue == null || (\"\").equals(keyValue.trim())) {\n\t\t\treturn keyValue;\n\t\t}\n\n\t\tStringBuilder result = new StringBuilder();\n\t\tint currIndex = 0;\n\t\twhile (currIndex < keyValue.length()) {\n\t\t\tint index = -1;\n\t\t\t// judege if the left string includes escape chars\n\t\t\tfor (String[] strArray : escapeChars) {\n\t\t\t\tindex = keyValue.indexOf(strArray[0], currIndex);\n\t\t\t\tif (index >= 0) {\n\n\t\t\t\t\tresult.append(keyValue.substring(currIndex,\n\t\t\t\t\t\t\tindex + strArray[0].length()).replace(strArray[0],\n\t\t\t\t\t\t\tstrArray[1]));\n\t\t\t\t\tcurrIndex = index + strArray[0].length();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if the left string doesn't include escape chars, append the left\n\t\t\t// into the result\n\t\t\tif (index < 0) {\n\t\t\t\tresult.append(keyValue.substring(currIndex));\n\t\t\t\tcurrIndex = currIndex + keyValue.length();\n\t\t\t}\n\t\t}\n\n\t\treturn result.toString();\n\t}\n\n\tpublic Integer getErrorCode() {\n\t\treturn errorCode;\n\t}\n\n\tpublic String getStatus() {\n\t\treturn status;\n\t}\n\n\tResumeUtil resumeUtil = null;\n}\n/************************************************************************************************\n * 85883 characters generated by Talend Data Fabric on the March 11, 2019\n * 4:28:50 PM CET\n ************************************************************************************************/\n",
      "status":200
    }
  }
]